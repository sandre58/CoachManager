<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.Parameters;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Wpf.Controls;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=System"
                    xmlns:dragAndDrop="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.DragAndDrop;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:columns="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.GridViews.Columns;assembly=My.CoachManager.Presentation.Wpf.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Geometry.xaml" />
        <ResourceDictionary Source="Icon.xaml" />
        <ResourceDictionary Source="ImagePicker.xaml" />
        <ResourceDictionary Source="ScrollBar.xaml" />
        <ResourceDictionary Source="ContextMenu.xaml" />
        <ResourceDictionary Source="DropDownButton.xaml" />
        <ResourceDictionary Source="Button.xaml" />
        <ResourceDictionary Source="Checkbox.xaml" />
        <ResourceDictionary Source="CommandButton.xaml" />
        <ResourceDictionary Source="Separator.xaml" />
        <ResourceDictionary Source="ToolbarControl.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Columns Sizes -->
    <system:Double x:Key="SelectionColumnWidth">35</system:Double>
    <system:Double x:Key="ActionColumnWidth">80</system:Double>

    <!-- Columns -->
    <Style x:Key="ToolbarControlForListViewItemStyle" TargetType="{x:Type controls:ToolbarControl}" BasedOn="{StaticResource {x:Type controls:ToolbarControl}}">
        <Setter Property="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource  FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolbarControlForAccentListViewItemStyle" TargetType="{x:Type controls:ToolbarControl}" BasedOn="{StaticResource AccentToolbarControlStyle}">
        <Setter Property="PlacementTarget" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource  FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ListItem Templates -->
    <ControlTemplate x:Key="ListViewItemTemplate" TargetType="{x:Type ListViewItem}">
        <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Border.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick"
                                          Command="{Binding DoubleClickCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:ExtendedListView}}}"
                                          CommandParameter="{Binding}" />
            </Border.InputBindings>

            <Grid>

                <!-- Content -->
                <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate  x:Key="DraggableListViewItemTemplate" TargetType="{x:Type ListViewItem}">
        <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
            <Border.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick"
                                          Command="{Binding DoubleClickCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:ItemsListView}}}"
                                          CommandParameter="{Binding}" />
            </Border.InputBindings>

            <controls:AdornedControl IsAdornerVisible="{Binding ElementName=MoveUpBorder, Path=(dragAndDrop:DragCommand.IsDragOver)}">
                <controls:AdornedControl.AdornerContent>
                    <Separator Style="{StaticResource HorizontalDragSeparatorStyle}"
                                           VerticalAlignment="Top" />
                </controls:AdornedControl.AdornerContent>
                <controls:AdornedControl IsAdornerVisible="{Binding ElementName=MoveDownBorder, Path=(dragAndDrop:DragCommand.IsDragOver)}">
                    <controls:AdornedControl.AdornerContent>
                        <Separator Style="{StaticResource HorizontalDragSeparatorStyle}"
                                               VerticalAlignment="Bottom" />
                    </controls:AdornedControl.AdornerContent>
                    <Grid x:Name="Grid" dragAndDrop:DragManager.ContentTemplate="{TemplateBinding parameters:DragAndDropParameters.MoveDragContentTemplate}"
                                      dragAndDrop:DragManager.Data="{Binding}"
                                      dragAndDrop:DragManager.Effects="Move"
                                      dragAndDrop:DragManager.Format="{TemplateBinding parameters:DragAndDropParameters.MoveDragFormat}"
                                      dragAndDrop:DragManager.IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:ItemsListView}, Path=CanOrder}"
                                      Background="{DynamicResource Transparent}">

                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <!-- Content -->
                            <GridViewRowPresenter x:Name="PART_RowPresenter"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="Horizontal" />
                            <ContentPresenter x:Name="PART_ContentPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Visibility="Collapsed" />
                        </SelectiveScrollingGrid>

                        <Grid dragAndDrop:DragViewer.Format="{TemplateBinding parameters:DragAndDropParameters.MoveDragFormat}"
                                          IsHitTestVisible="{Binding Path=(dragAndDrop:DragViewer.IsDragging), RelativeSource={RelativeSource Self}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="MoveUpBorder"
                                                dragAndDrop:DragCommand.Command="{TemplateBinding parameters:DragAndDropParameters.MoveAboveCommand}"
                                                dragAndDrop:DragCommand.Format="{TemplateBinding parameters:DragAndDropParameters.MoveDragFormat}"
                                                AllowDrop="True"
                                                Background="{DynamicResource Transparent}"
                                                Focusable="False" />
                            <Border x:Name="MoveDownBorder"
                                                Grid.Row="1"
                                                dragAndDrop:DragCommand.Command="{TemplateBinding parameters:DragAndDropParameters.MoveBelowCommand}"
                                                dragAndDrop:DragCommand.Format="{TemplateBinding parameters:DragAndDropParameters.MoveDragFormat}"
                                                AllowDrop="True"
                                                Background="{DynamicResource Transparent}"
                                                Focusable="False" />
                        </Grid>
                    </Grid>
                </controls:AdornedControl>
            </controls:AdornedControl>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_RowPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ListItem Styles -->
    <Style x:Key="NotSelectableListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="{DynamicResource HeaderBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource HeaderBackground}" />
        <Setter Property="BorderThickness" Value="5,0,0,0" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="35" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template" Value="{StaticResource ListViewItemTemplate}" />

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource NotSelectableListViewItemStyle}">
        <Style.Resources>
            <Style TargetType="{x:Type controls:Icon}" BasedOn="{StaticResource {x:Type controls:Icon}}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
                        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style BasedOn="{StaticResource {x:Type controls:HyperlinkButton}}" TargetType="{x:Type controls:HyperlinkButton}">
                <Setter Property="Focusable" Value="False" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
                        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource SecondaryAccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource SecondaryAccentColor}" Opacity="{DynamicResource ColorOpacity}" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource SecondaryAccentForeground}" />

        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground), Mode=OneWay}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBackground), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBorderBrush), Mode=OneWay}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground), Mode=OneWay}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground), Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBorderBrush), Mode=OneWay}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Headers -->
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent">
                        <Rectangle Width="1"
                                   HorizontalAlignment="Center"
                                   Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="18" />
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="{DynamicResource DarkControlPressed}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Transparent}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
        <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{StaticResource DefaultMargin}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>

                        <!-- Background -->
                        <Border x:Name="BackgroundBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />

                        <!-- Header -->
                        <ContentControl DockPanel.Dock="Left" x:Name="HeaderContent"
                                                Padding="{TemplateBinding Padding}"
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Content="{TemplateBinding Content}"
                                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                Typography.Capitals="SmallCaps" />

                        <!-- Sorting -->
                        <DockPanel>
                            <controls:Icon HorizontalAlignment="Right" DockPanel.Dock="Right" x:Name="SortArrow" Width="12" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"
                                           Margin="{StaticResource DefaultHorizontalMargin}" />
                        </DockPanel>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="columns:ExtendedGridViewColumn.IsSorting" Value="False">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="HasContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SortArrow" Property="Opacity" Value="0.5" />
                                <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="HasContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                                <Setter TargetName="SortArrow" Property="Opacity" Value="0.8" />
                                <Setter Property="Foreground" Value="{DynamicResource SecondaryAccent}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="columns:ExtendedGridViewColumn.SortDirection" Value="{x:Static componentModel:ListSortDirection.Ascending}">
                            <Setter TargetName="SortArrow" Property="Content" Value="{StaticResource UpArrowGeometry}" />
                        </Trigger>
                        <Trigger Property="columns:ExtendedGridViewColumn.SortDirection" Value="{x:Static componentModel:ListSortDirection.Descending}">
                            <Setter TargetName="SortArrow" Property="Content" Value="{StaticResource DownArrowGeometry}" />
                        </Trigger>
                        <Trigger Property="columns:ExtendedGridViewColumn.IsSorting" Value="True">
                            <Setter TargetName="SortArrow" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryAccent}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=CanSort, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:ExtendedListView}}}" Value="False">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Foreground" Value="{DynamicResource DarkControlPressed}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListView -->
    <Style x:Key="ListViewBaseStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <Style BasedOn="{StaticResource SmallScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
            <Style TargetType="{x:Type controls:ToolbarControl}" BasedOn="{StaticResource ToolbarControlForListViewItemStyle}" />
        </Style.Resources>
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Transparent}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
        <Setter Property="FontStretch" Value="Medium" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemStyle}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True" IsItemsHost="True"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            VirtualizationMode="Recycling"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ScrollViewer Padding="{TemplateBinding Padding}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Border Grid.Row="0" Grid.ColumnSpan="2"
                                                Background="{DynamicResource Transparent}"
                                                BorderBrush="{DynamicResource Control}"
                                                BorderThickness="0,0,0,1"
                                                Margin="{StaticResource DefaultBottomMargin}">

                                            <!-- Column Header -->
                                            <GridViewHeaderRowPresenter x:Name="PART_HeaderRowPresenter"
                                                                Margin="2 0 2 0"
                                                                AllowsColumnReorder="{Binding View.AllowsColumnReorder, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderContainerStyle="{Binding View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderContextMenu="{Binding View.ColumnHeaderContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderStringFormat="{Binding View.ColumnHeaderStringFormat, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderTemplate="{Binding View.ColumnHeaderTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderTemplateSelector="{Binding View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                ColumnHeaderToolTip="{Binding View.ColumnHeaderToolTip, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                Columns="{Binding View.Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Border>

                                        <!-- Content -->
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                                Grid.Column="0"
                                                                Grid.Row="1"
                                                                CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <!-- Vertical Scrollbar -->
                                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                                   Grid.Column="1"
                                                   Grid.Row="1"
                                                   Maximum="{TemplateBinding ScrollableHeight}"
                                                   Orientation="Vertical"
                                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}" />

                                        <!-- Horizontal Scrollbar -->
                                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                                   Grid.Row="2" Grid.Column="1"
                                                       Maximum="{TemplateBinding ScrollableWidth}"
                                                       Orientation="Horizontal"
                                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                       ViewportSize="{TemplateBinding ViewportWidth}" />
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource ListViewBaseStyle}" />
    <Style TargetType="{x:Type controls:ExtendedListView}" BasedOn="{StaticResource ListViewBaseStyle}" />
</ResourceDictionary>
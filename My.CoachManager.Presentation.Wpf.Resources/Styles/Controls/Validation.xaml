<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Wpf.Controls;assembly=My.CoachManager.Presentation.Wpf.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Geometry.xaml" />
        <ResourceDictionary Source="Popup.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="ValidationErrorTemplate">
        <AdornedElementPlaceholder x:Name="placeholder">
            <Grid SnapsToDevicePixels="True">
                <Rectangle x:Name="PopupTargetElement"
                           Margin="-5 0 -5 0"
                           StrokeThickness="0"
                           DataContext="{Binding ElementName=placeholder}" />
                <Border x:Name="ValidationErrorElement"
                        BorderBrush="{DynamicResource Negative}"
                        BorderThickness="{Binding ElementName=placeholder, Path=AdornedElement.BorderThickness}"
                        DataContext="{Binding ElementName=placeholder}">
                    <Grid>
                        <controls:Icon x:Name="Icon" Size="Custom" Margin="0,0,-25,0" Width="20" Height="20" Content="{StaticResource WarningGeometry}" Foreground="{DynamicResource Negative}" HorizontalAlignment="Right" VerticalAlignment="Center" />
                        <TextBlock Foreground="{DynamicResource Negative}"
                                               Text="{Binding AdornedElement.(Validation.Errors)[0].ErrorContent}"
                                               FontSize="{DynamicResource SmallFontSize}"
                                               TextWrapping="NoWrap"
                                               TextTrimming="CharacterEllipsis"
                                               UseLayoutRounding="False"
                                               Margin="0,0,0,-14" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                    </Grid>
                </Border>
            </Grid>
        </AdornedElementPlaceholder>
    </ControlTemplate>

    <ControlTemplate x:Key="PopupValidationErrorTemplate">
        <AdornedElementPlaceholder x:Name="placeholder">
            <Grid SnapsToDevicePixels="True">
                <Rectangle x:Name="PopupTargetElement"
                           Margin="-5 0 -5 0"
                           StrokeThickness="0"
                           DataContext="{Binding ElementName=placeholder}" />
                <Border x:Name="ValidationErrorElement"
                        BorderBrush="{DynamicResource Negative}"
                        BorderThickness="{Binding ElementName=placeholder, Path=AdornedElement.BorderThickness}"
                        DataContext="{Binding ElementName=placeholder}">
                    <Grid>
                        <controls:Icon x:Name="Icon" Size="Custom" Width="20" Height="20" Content="{DynamicResource WarningGeometry}" Foreground="{DynamicResource Negative}" HorizontalAlignment="Right" VerticalAlignment="Center" />
                    </Grid>
                </Border>

                <Popup x:Name="ValidationPopup" Style="{StaticResource ValidationPopupStyle}"
                                                AllowsTransparency="True"
                                                IsOpen="False"
                                                PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
                    <Grid x:Name="Root" Margin="4">
                        <Grid.Resources>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=Root, Path=IsMouseOver, Mode=OneWay}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0:0:0.2"
                                                                     Storyboard.TargetProperty="Opacity"
                                                                     To="0.15" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0:0:0.2"
                                                                     Storyboard.TargetProperty="Opacity"
                                                                     To="1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <Border Margin="4 4 -4 -4"
                                Background="{DynamicResource DarkVariation1}"
                                CornerRadius="5" />
                        <Border Margin="3 3 -3 -3"
                                Background="{DynamicResource DarkVariation2}"
                                CornerRadius="4" />
                        <Border Margin="2 2 -2 -2"
                                Background="{DynamicResource DarkVariation3}"
                                CornerRadius="3" />
                        <Border Margin="1 1 -1 -1"
                                Background="{DynamicResource DarkVariation4}"
                                CornerRadius="2" />
                        <Border Background="{DynamicResource Negative}" CornerRadius="2">
                            <Border.Resources>
                                <DataTemplate DataType="{x:Type ValidationError}">
                                    <TextBlock MaxWidth="250"
                                               Margin="8 4 8 4"
                                               Foreground="{DynamicResource White}"
                                               Text="{Binding ErrorContent}"
                                               TextWrapping="Wrap"
                                               UseLayoutRounding="False" />
                                </DataTemplate>
                            </Border.Resources>
                            <ItemsControl ItemsSource="{Binding }" />
                        </Border>
                    </Grid>
                </Popup>
            </Grid>
        </AdornedElementPlaceholder>

        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Icon, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>
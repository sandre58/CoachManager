<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.Parameters;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Wpf.Controls;assembly=My.CoachManager.Presentation.Wpf.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Geometry.xaml" />
        <ResourceDictionary Source="../Base/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Command Button -->
    <Style x:Key="ToggleCommandButtonBaseStyle" TargetType="{x:Type controls:ToggleCommandButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkControl}" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.Foreground" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.PressedBorderBrush" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{DynamicResource SecondaryAccentForeground}" />
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource SecondaryAccent}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="ButtonDiameter" Value="{DynamicResource LargeDiameter}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ToggleCommandButton}">
                    <Grid x:Name="grid" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid  Height="{TemplateBinding ButtonDiameter}" Width="{TemplateBinding ButtonDiameter}" HorizontalAlignment="Center">
                            <Ellipse x:Name="ellipse"
                                     Stroke="{TemplateBinding BorderBrush}"
                                     StrokeThickness="2"
                                     Fill="{TemplateBinding Background}"
                                     VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                            <Path x:Name="icon"
                                  Data="{TemplateBinding IconData}"
                                  Height="{Binding Path=ButtonDiameter, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CoefficientConverter}, ConverterParameter='0,6'}"
                                  Width="{Binding Path=ButtonDiameter, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CoefficientConverter}, ConverterParameter='0,6'}"
                                  Fill="{Binding Path=(parameters:ControlParameters.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                                  Margin="{TemplateBinding Padding}"
                                  Stretch="Uniform" HorizontalAlignment="Center"
                                  VerticalAlignment="Center" />
                        </Grid>
                        <Grid Grid.Row="1" HorizontalAlignment="Center">
                            <TextBlock x:Name="content" Visibility="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource NullToVisibilityConverter}}"
                                       Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                                       TextTrimming="CharacterEllipsis"
                                       Foreground="{TemplateBinding Foreground}"
                                       Margin="0,3,0,0"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
                            <Setter TargetName="ellipse" Property="Stroke" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                            <Setter TargetName="ellipse" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.PressedForeground)}" />
                            <Setter TargetName="ellipse" Property="Stroke" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.PressedBorderBrush)}" />
                            <Setter TargetName="ellipse" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.PressedBackground)}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusForeground)}" />
                            <Setter TargetName="ellipse" Property="Stroke" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="ellipse" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBackground)}" />
                            <Setter TargetName="icon" Property="Data" Value="{Binding RelativeSource={RelativeSource Self}, Path=CheckedIconData}" />
                            <Setter TargetName="content" Property="Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=CheckedContent}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:ToggleCommandButton}" BasedOn="{StaticResource ToggleCommandButtonBaseStyle}" />

    <Style x:Key="ToggleCommandButtonApplicationBarStyle" TargetType="{x:Type controls:ToggleCommandButton}" BasedOn="{StaticResource ToggleCommandButtonBaseStyle}">
        <Setter Property="ButtonDiameter" Value="{DynamicResource VeryLargeDiameter}" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryAccentForeground}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:ApplicationBar}, Path=Foreground}" />
        <Setter Property="parameters:ControlParameters.Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush, Converter={StaticResource ColorToBrushConverter}, ConverterParameter={StaticResource ColorOpacity}}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush, Converter={StaticResource ColorToBrushConverter}, ConverterParameter={StaticResource ColorOpacity}}" />
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
        <Setter Property="parameters:ControlParameters.PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:ApplicationBar}, Path=Background}" />
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding RelativeSource="{RelativeSource Self}" Path="BorderBrush" Converter="{StaticResource NotEqualsConverter}">
                        <Binding.ConverterParameter>
                            <SolidColorBrush Color="White" />
                        </Binding.ConverterParameter>
                    </Binding>
                </DataTrigger.Binding>
                <Setter Property="parameters:ControlParameters.PressedForeground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
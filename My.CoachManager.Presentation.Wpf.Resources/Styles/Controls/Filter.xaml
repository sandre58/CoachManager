<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Wpf.Controls;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:extensions="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.Extensions;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:resources="clr-namespace:My.CoachManager.CrossCutting.Core.Resources;assembly=My.CoachManager.CrossCutting.Core"
                    xmlns:screens="clr-namespace:My.CoachManager.Presentation.Wpf.Core.ViewModels;assembly=My.CoachManager.Presentation.Wpf.Core"
                    xmlns:enums="clr-namespace:My.CoachManager.CrossCutting.Core.Enums;assembly=My.CoachManager.CrossCutting.Core"
                    xmlns:filters="clr-namespace:My.CoachManager.Presentation.Core.Models.Filters;assembly=My.CoachManager.Presentation.Core"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Wpf.Controls.Parameters;assembly=My.CoachManager.Presentation.Wpf.Controls"
                    xmlns:selectors="clr-namespace:My.CoachManager.Presentation.Wpf.Resources.Selectors">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Sizes.xaml" />
        <ResourceDictionary Source="../Controls/TextBox.xaml" />
        <ResourceDictionary Source="../Controls/NumericUpDown.xaml" />
        <ResourceDictionary Source="../Controls/Combobox.xaml" />
        <ResourceDictionary Source="../Controls/Checkbox.xaml" />
        <ResourceDictionary Source="../Controls/RadioButton.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <system:Double x:Key="CoefficientRatingBy5">0.2</system:Double>

    <DataTemplate DataType="{x:Type screens:FilterViewModel}">
        <Grid Background="{DynamicResource HeaderBackground}" Margin="{StaticResource SmallMargin}">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="100" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0"
                    Style="{StaticResource RemoveButtonStyle}"
                    Width="18" Height="18"
                    ToolTip="{x:Static resources:ControlResources.RemoveCondition}"
                    Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:WorkspaceView}}, Path=DataContext.Filters.RemoveFilterCommand}"
                    CommandParameter="{Binding Filter}" Margin="{StaticResource LargeMargin}" />
            <CheckBox Grid.Column="1" x:Name="IsEnabled" IsChecked="{Binding IsEnabled}" HorizontalAlignment="Center" Style="{StaticResource CircleCheckBoxStyle}" />
            <ComboBox Grid.Column="2"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="60"
                      IsEnabled="{Binding ElementName=IsEnabled, Path=IsChecked}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:LogicalOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      Visibility="{Binding OperatorIsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <TextBlock Grid.Column="3" Text="{Binding Title}" IsEnabled="{Binding ElementName=IsEnabled, Path=IsChecked}" />
            <ContentControl Grid.Column="4" Content="{Binding Filter}" IsEnabled="{Binding ElementName=IsEnabled, Path=IsChecked}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:StringFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0" Grid.Row="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:StringOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}"/>
            <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" Width="{StaticResource MediumWidth}" Style="{StaticResource TextBoxBaseStyle}" />
            <CheckBox Grid.Column="2" IsChecked="{Binding CaseSensitive}" Content="{x:Static resources:ControlResources.CaseSensitive}"
                      Visibility="{Binding IsFixed, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=inverse}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:BooleanFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Horizontal" Margin="{StaticResource DefaultVerticalMargin}">
                <RadioButton Style="{StaticResource IconRadioButtonStyle}" Content="{x:Static resources:ControlResources.Yes}"
                             parameters:ControlParameters.Icon="{DynamicResource OkGeometry}" parameters:ControlParameters.FocusBackground="{DynamicResource Positive}"
                             parameters:ControlParameters.PressedBackground="{DynamicResource Positive}"
                             IsChecked="{Binding Value, UpdateSourceTrigger=PropertyChanged}" />
                <RadioButton Style="{StaticResource IconRadioButtonStyle}" Content="{x:Static resources:ControlResources.No}"
                             parameters:ControlParameters.Icon="{DynamicResource CancelGeometry}" parameters:ControlParameters.FocusBackground="{DynamicResource Negative}"
                             parameters:ControlParameters.PressedBackground="{DynamicResource Negative}"
                             IsChecked="{Binding Value, Converter={StaticResource NotConverter}, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="StringSpeedFilterTemplate" DataType="{x:Type filters:StringFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBox Grid.Column="0" Grid.Row="0" Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" Width="{StaticResource MediumWidth}" Style="{StaticResource TextBoxBaseStyle}" parameters:TextBoxParameters.Watermark="{x:Static resources:ControlResources.SpeedSearch}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:IntegerFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:ComplexComparableOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <controls:ExtendedNumericUpDown x:Name="From" Grid.Column="1"
                                            Value="{Binding From}"
                                            Minimum="{Binding Minimum}"
                                            Maximum="{Binding Maximum}"
                                            Width="{StaticResource MidSmallWidth}"
                                            Style="{StaticResource ExtendedNumericUpDownBaseStyle}" />
            <TextBlock x:Name="And" Grid.Column="2" Text="{x:Static resources:GlobalResources.And}" />
            <controls:ExtendedNumericUpDown x:Name="To" Grid.Column="3"
                                            Value="{Binding To}"
                                            Minimum="{Binding Minimum}"
                                            Maximum="{Binding Maximum}"
                                            Width="{StaticResource MidSmallWidth}"
                                            Style="{StaticResource ExtendedNumericUpDownBaseStyle}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.EqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.NotEqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:DateFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:ComplexComparableOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <DatePicker x:Name="From" Grid.Column="1"
                                            SelectedDate="{Binding From}"
                                            Width="{StaticResource MediumWidth}" />
            <TextBlock x:Name="And" Grid.Column="2" Text="{x:Static resources:GlobalResources.And}" />
            <DatePicker x:Name="To" Grid.Column="3"
                                             SelectedDate="{Binding To}"
                                            Width="{StaticResource MediumWidth}" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.EqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.GreaterThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessEqualThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.LessThan}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="From" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Operator}" Value="{x:Static enums:ComplexComparableOperator.NotEqualsTo}">
                <Setter TargetName="And" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="To" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:SelectedLabelableFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:BinaryOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <ComboBox Grid.Column="1" Width="{StaticResource MidSmallWidth}"
                      HorizontalAlignment="Center" Style="{StaticResource ComboBoxStyle}"
                      ItemsSource="{Binding AllowedValues}"
                      DisplayMemberPath="Label" SelectedValuePath="Id" SelectedValue="{Binding Value}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:SelectedLabelablesFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:BinaryOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <controls:MultiComboBox Grid.Column="1" Width="{StaticResource SmallLargeWidth}"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedMultiComboBoxStyle}"
                      ItemsSource="{Binding AllowedValues}" ShowAll="{Binding ShowAll}"
                      DisplayMemberPath="Label" ValueMemberPath="Id" SelectedValues="{Binding Values, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:EnumValueFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:BinaryOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <ComboBox Grid.Column="1" Width="{StaticResource MidSmallWidth}"
                      HorizontalAlignment="Center" Style="{StaticResource ComboBoxStyle}"
                      ItemsSource="{Binding AllowedValues}"
                      DisplayMemberPath="Item1" SelectedValuePath="Item2" SelectedValue="{Binding Value}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type filters:EnumValuesFilter}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ComboBox Grid.Column="0"
                      HorizontalAlignment="Center" Style="{StaticResource VirtualisedComboBoxStyle}"
                      Width="{StaticResource MediumWidth}"
                      ItemsSource="{Binding Source={extensions:Enum {x:Type enums:BinaryOperator}}}"
                      DisplayMemberPath="Display" SelectedValuePath="Value" SelectedValue="{Binding Operator, Mode=TwoWay}"
                      IsEnabled="{Binding IsFixed, Converter={StaticResource NotConverter}}" />
            <controls:MultiComboBox Grid.Column="1" Width="{StaticResource SmallLargeWidth}"
                                    HorizontalAlignment="Center" Style="{StaticResource VirtualisedMultiComboBoxStyle}"
                                    ItemsSource="{Binding AllowedValues}"
                                    DisplayMemberPath="Item1" ValueMemberPath="Item2" SelectedValues="{Binding Values, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </Grid>
    </DataTemplate>

    <Style x:Key="SpeedFilterStyle" TargetType="ContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <WrapPanel VerticalAlignment="Center">
                        <controls:Icon VerticalAlignment="Center" 
                                        Content="{StaticResource SearchGeometry}" 
                                       Size="Custom" Height="{StaticResource SmallHeight}"  />
                        <ContentPresenter />
                    </WrapPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="screens:FilterViewModel">
                    <ContentControl Content="{Binding Filter}">
                        <ContentControl.ContentTemplateSelector>
                            <selectors:SpeedFilterDataTemplateSelector StringFilterTemplate="{StaticResource StringSpeedFilterTemplate}" />
                        </ContentControl.ContentTemplateSelector>
                    </ContentControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
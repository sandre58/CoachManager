<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:primitives="clr-namespace:Elysium.Controls.Primitives;assembly=Elysium"
                    xmlns:params="http://schemas.codeplex.com/elysium/params"
                    xmlns:myparams="clr-namespace:My.CoachManager.Presentation.Parameters"
                    xmlns:elysium="http://schemas.codeplex.com/elysium"
                    xmlns:extra="http://schemas.extra.com/ui">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <!--<ResourceDictionary Source="../Base/Brushes.xaml" />-->
        <extra:SharedResourceDictionary Source="/Framework.UI;component/Themes/WPF/Base/Geometry.xaml" />
        <extra:SharedResourceDictionary Source="/Framework.UI;component/Themes/ElysiumExtra/Icon.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Base -->
    <Style x:Key="{x:Type primitives:CommandButtonBase}" TargetType="{x:Type primitives:CommandButtonBase}">
        <Setter Property="Background" Value="{DynamicResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush3}" />
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self},Path=(params:General.BoldThickness),Mode=OneWay}" />
        <Setter Property="myparams:ControlParameters.PressedBackground" Value="{DynamicResource PressedBackgroundBrush}" />
        <Setter Property="myparams:ControlParameters.PressedBorderBrush" Value="{DynamicResource PressedBorderBrush}" />
        <Setter Property="myparams:ControlParameters.PressedForeground" Value="{DynamicResource PressedForegroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="myparams:ControlParameters.Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self},Path=(params:General.ContentFontSize),Mode=OneWay}" />
        <Setter Property="FontStretch" Value="Medium" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self},Path=(params:General.SemiBoldPadding),Mode=OneWay}" />
        <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource Self},Path=(params:General.BoldPadding),Mode=OneWay}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CommandButtonBase}">
                    <Grid Background="{StaticResource TransparentBrush}" TextBlock.Foreground="{TemplateBinding myparams:ControlParameters.Foreground}" TextBlock.FontFamily="{TemplateBinding Control.FontFamily}" TextBlock.FontSize="{TemplateBinding FontSize}" TextBlock.FontStretch="{TemplateBinding FontStretch}" TextBlock.FontStyle="{TemplateBinding FontStyle}" TextBlock.FontWeight="{TemplateBinding FontWeight}" TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}" TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Ellipse x:Name="PART_Decor" Grid.Row="0" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" Stretch="Fill" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" StrokeThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ThicknessToDoubleConverter}}" />
                        <Ellipse x:Name="PART_Mask" Grid.Row="0" Stroke="{StaticResource TransparentBrush}" Fill="{TemplateBinding Foreground}" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource ThicknessToDoubleConverter}}" Width="{Binding ElementName=PART_Decor,Path=ActualWidth,Mode=OneWay}" Height="{Binding ElementName=PART_Decor,Path=ActualHeight,Mode=OneWay}">
                            <UIElement.OpacityMask>
                                <VisualBrush AutoLayoutContent="True" AlignmentX="Center" AlignmentY="Center" Stretch="None">
                                    <VisualBrush.Visual>
                                        <ContentPresenter x:Name="PART_ContentHost" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" />
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </UIElement.OpacityMask>
                        </Ellipse>
                        <ContentPresenter x:Name="PART_HeaderHost" Grid.Row="1" Content="{TemplateBinding primitives:CommandButtonBase.Header}" ContentStringFormat="{TemplateBinding primitives:CommandButtonBase.HeaderStringFormat}" ContentTemplate="{TemplateBinding primitives:CommandButtonBase.HeaderTemplate}" ContentTemplateSelector="{TemplateBinding primitives:CommandButtonBase.HeaderTemplateSelector}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="primitives:CommandButtonBase.Header">
                            <Setter TargetName="PART_HeaderHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Decor" Property="Opacity" Value="0.6" />
                            <Setter TargetName="PART_Mask" Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Decor" Property="Opacity" Value="1" />
                            <Setter TargetName="PART_Mask" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <extra:Icon Size="Medium"
                                Style="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type elysium:CommandButton}}, Path=(myparams:ControlParameters.Icon)}"
                                Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type elysium:CommandButton}}, Path=Foreground}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=FontSize,Mode=OneWay,Converter={StaticResource IsGreaterThanConverter},ConverterParameter=18}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            </DataTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBackground),Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBorderBrush),Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedForeground),Mode=OneWay}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource ControlsDisabledBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ControlsDisabledBrush}" />
                <Setter Property="myparams:ControlParameters.Foreground" Value="{DynamicResource ControlsDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CommandButtonColorStyle" TargetType="{x:Type primitives:CommandButtonBase}" BasedOn="{StaticResource {x:Type primitives:CommandButtonBase}}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=BorderBrush}" />
        <Setter Property="myparams:ControlParameters.PressedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=BorderBrush}" />
        <Setter Property="myparams:ControlParameters.PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=BorderBrush}" />
    </Style>

    <!-- Button -->
    <Style TargetType="{x:Type elysium:CommandButton}" BasedOn="{StaticResource {x:Type primitives:CommandButtonBase}}" />

    <!-- Toggle Button -->
    <Style TargetType="{x:Type elysium:ToggleCommandButton}" BasedOn="{StaticResource {x:Type primitives:CommandButtonBase}}">
        <Style.Triggers>
            <Trigger Property="elysium:ToggleCommandButton.IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBackground),Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBorderBrush),Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedForeground),Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CommandToggleButtonColorStyle" TargetType="{x:Type elysium:ToggleCommandButton}" BasedOn="{StaticResource {x:Type elysium:ToggleCommandButton}}">
        <Style.Triggers>
            <Trigger Property="elysium:ToggleCommandButton.IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBackground),Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedBorderBrush),Mode=OneWay}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self},Path=(myparams:ControlParameters.PressedForeground),Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- For Application Bar -->
    <Style x:Key="CommandButtonApplicationBarStyle" TargetType="{x:Type primitives:CommandButtonBase}" BasedOn="{StaticResource CommandButtonColorStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationBarForegoundBrush}" />
        <Setter Property="myparams:ControlParameters.PressedForeground" Value="{DynamicResource ApplicationBarBackgroundBrush}" />
        <Setter Property="myparams:ControlParameters.Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    </Style>
    <Style x:Key="CommandToggleButtonApplicationBarStyle" TargetType="{x:Type elysium:ToggleCommandButton}" BasedOn="{StaticResource CommandToggleButtonColorStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource ApplicationBarForegoundBrush}" />
        <Setter Property="myparams:ControlParameters.PressedForeground" Value="{DynamicResource ApplicationBarBackgroundBrush}" />
        <Setter Property="myparams:ControlParameters.Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    </Style>
</ResourceDictionary>
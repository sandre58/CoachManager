// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My.CoachManager.CrossCutting.Core.Enums;
using My.CoachManager.Infrastructure.Data.UnitOfWorks;

namespace My.CoachManager.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190130122552_RosterPlayerInTraining")]
    partial class RosterPlayerInTraining
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5);

                    b.Property<string>("Row1");

                    b.Property<string>("Row2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Adresses");

                    b.HasData(
                        new { Id = 1, City = "Vic le comte", Latitude = 0.0, Longitude = 0.0, PostalCode = "63270", Row1 = "Impasse du Babory" }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Order");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Code = "S", Label = "Séniors", Order = 1, Year = 1998 },
                        new { Id = 2, Code = "V", Label = "Vétérans", Order = 2, Year = 1982 },
                        new { Id = 3, Code = "U19", Label = "U19", Order = 3, Year = 1999 },
                        new { Id = 4, Code = "U18", Label = "U18", Order = 4, Year = 2000 },
                        new { Id = 5, Code = "U17", Label = "U17", Order = 5, Year = 2001 },
                        new { Id = 6, Code = "U16", Label = "U16", Order = 6, Year = 2002 },
                        new { Id = 7, Code = "U15", Label = "U15", Order = 7, Year = 2003 },
                        new { Id = 8, Code = "U14", Label = "U14", Order = 8, Year = 2004 },
                        new { Id = 9, Code = "U13", Label = "U13", Order = 9, Year = 2005 },
                        new { Id = 10, Code = "U12", Label = "U12", Order = 10, Year = 2006 },
                        new { Id = 11, Code = "U11", Label = "U11", Order = 11, Year = 2007 },
                        new { Id = 12, Code = "U10", Label = "U10", Order = 12, Year = 2008 },
                        new { Id = 13, Code = "U9", Label = "U9", Order = 13, Year = 2009 },
                        new { Id = 14, Code = "U8", Label = "U8", Order = 14, Year = 2010 },
                        new { Id = 15, Code = "U7", Label = "U7", Order = 15, Year = 2011 },
                        new { Id = 16, Code = "U6", Label = "U6", Order = 16, Year = 2012 }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Default");

                    b.Property<string>("Label");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PersonId");

                    b.Property<int>("Type");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Contacts");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Flag");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Code = "afg", Flag = "af.png", Label = "Afghanistan", Order = 0 },
                        new { Id = 2, Code = "ala", Flag = "ax.png", Label = "Aland Islands", Order = 0 },
                        new { Id = 3, Code = "alb", Flag = "al.png", Label = "Albania", Order = 0 },
                        new { Id = 4, Code = "dza", Flag = "dz.png", Label = "Algeria", Order = 0 },
                        new { Id = 5, Code = "asm", Flag = "as.png", Label = "American Samoa", Order = 0 },
                        new { Id = 6, Code = "and", Flag = "ad.png", Label = "Andorra", Order = 0 },
                        new { Id = 7, Code = "ago", Flag = "ao.png", Label = "Angola", Order = 0 },
                        new { Id = 8, Code = "aia", Flag = "ai.png", Label = "Anguilla", Order = 0 },
                        new { Id = 9, Code = "ant", Flag = "aq.png", Label = "Antarctica", Order = 0 },
                        new { Id = 10, Code = "atg", Flag = "ag.png", Label = "Antigua and Barbuda", Order = 0 },
                        new { Id = 11, Code = "arg", Flag = "ar.png", Label = "Argentina", Order = 0 },
                        new { Id = 12, Code = "arm", Flag = "am.png", Label = "Armenia", Order = 0 },
                        new { Id = 13, Code = "abw", Flag = "aw.png", Label = "Aruba", Order = 0 },
                        new { Id = 14, Code = "aus", Flag = "au.png", Label = "Australia", Order = 0 },
                        new { Id = 15, Code = "aut", Flag = "at.png", Label = "Austria", Order = 0 },
                        new { Id = 16, Code = "aze", Flag = "az.png", Label = "Azerbaijan", Order = 0 },
                        new { Id = 17, Code = "bhs", Flag = "bs.png", Label = "Bahamas", Order = 0 },
                        new { Id = 18, Code = "bhr", Flag = "bh.png", Label = "Bahrain", Order = 0 },
                        new { Id = 19, Code = "bgd", Flag = "bd.png", Label = "Bangladesh", Order = 0 },
                        new { Id = 20, Code = "brb", Flag = "bb.png", Label = "Barbados", Order = 0 },
                        new { Id = 21, Code = "blr", Flag = "by.png", Label = "Belarus", Order = 0 },
                        new { Id = 22, Code = "bel", Flag = "be.png", Label = "Belgium", Order = 0 },
                        new { Id = 23, Code = "blz", Flag = "bz.png", Label = "Belize", Order = 0 },
                        new { Id = 24, Code = "ben", Flag = "bj.png", Label = "Benin", Order = 0 },
                        new { Id = 25, Code = "bmu", Flag = "bm.png", Label = "Bermuda", Order = 0 },
                        new { Id = 26, Code = "btn", Flag = "bt.png", Label = "Bhutan", Order = 0 },
                        new { Id = 27, Code = "bol", Flag = "bo.png", Label = "Bolivia, Plurinational State of", Order = 0 },
                        new { Id = 28, Code = "bes", Flag = "bq.png", Label = "Bonaire, Sint Eustatius and Saba", Order = 0 },
                        new { Id = 29, Code = "bih", Flag = "ba.png", Label = "Bosnia and Herzegovina", Order = 0 },
                        new { Id = 30, Code = "bwa", Flag = "bw.png", Label = "Botswana", Order = 0 },
                        new { Id = 31, Code = "bvi", Flag = "bv.png", Label = "Bouvet Island", Order = 0 },
                        new { Id = 32, Code = "bra", Flag = "br.png", Label = "Brazil", Order = 0 },
                        new { Id = 33, Code = "bio", Flag = "io.png", Label = "British Indian Ocean Territory", Order = 0 },
                        new { Id = 34, Code = "brn", Flag = "bn.png", Label = "Brunei Darussalam", Order = 0 },
                        new { Id = 35, Code = "bgr", Flag = "bg.png", Label = "Bulgaria", Order = 0 },
                        new { Id = 36, Code = "bfa", Flag = "bf.png", Label = "Burkina Faso", Order = 0 },
                        new { Id = 37, Code = "bdi", Flag = "bi.png", Label = "Burundi", Order = 0 },
                        new { Id = 38, Code = "khm", Flag = "kh.png", Label = "Cambodia", Order = 0 },
                        new { Id = 39, Code = "cmr", Flag = "cm.png", Label = "Cameroon", Order = 0 },
                        new { Id = 40, Code = "can", Flag = "ca.png", Label = "Canada", Order = 0 },
                        new { Id = 41, Code = "cpv", Flag = "cv.png", Label = "Cape Verde", Order = 0 },
                        new { Id = 42, Code = "cym", Flag = "ky.png", Label = "Cayman Islands", Order = 0 },
                        new { Id = 43, Code = "caf", Flag = "cf.png", Label = "Central African Republic", Order = 0 },
                        new { Id = 44, Code = "tcd", Flag = "td.png", Label = "Chad", Order = 0 },
                        new { Id = 45, Code = "chl", Flag = "cl.png", Label = "Chile", Order = 0 },
                        new { Id = 46, Code = "chn", Flag = "cn.png", Label = "China", Order = 0 },
                        new { Id = 47, Code = "chi", Flag = "cx.png", Label = "Christmas Island", Order = 0 },
                        new { Id = 48, Code = "coc", Flag = "cc.png", Label = "Cocos (Keeling) Islands", Order = 0 },
                        new { Id = 49, Code = "col", Flag = "co.png", Label = "Colombia", Order = 0 },
                        new { Id = 50, Code = "com", Flag = "km.png", Label = "Comoros", Order = 0 },
                        new { Id = 51, Code = "cog", Flag = "cg.png", Label = "Congo", Order = 0 },
                        new { Id = 52, Code = "cod", Flag = "cd.png", Label = "Congo, The Democratic Republic of the", Order = 0 },
                        new { Id = 53, Code = "cok", Flag = "ck.png", Label = "Cook Islands", Order = 0 },
                        new { Id = 54, Code = "cri", Flag = "cr.png", Label = "Costa Rica", Order = 0 },
                        new { Id = 55, Code = "civ", Flag = "ci.png", Label = "Cote d'Ivoire", Order = 0 },
                        new { Id = 56, Code = "hrv", Flag = "hr.png", Label = "Croatia", Order = 0 },
                        new { Id = 57, Code = "cub", Flag = "cu.png", Label = "Cuba", Order = 0 },
                        new { Id = 58, Code = "cuw", Flag = "cw.png", Label = "Curacao", Order = 0 },
                        new { Id = 59, Code = "cyp", Flag = "cy.png", Label = "Cyprus", Order = 0 },
                        new { Id = 60, Code = "cze", Flag = "cz.png", Label = "Czech Republic", Order = 0 },
                        new { Id = 61, Code = "dnk", Flag = "dk.png", Label = "Denmark", Order = 0 },
                        new { Id = 62, Code = "dji", Flag = "dj.png", Label = "Djibouti", Order = 0 },
                        new { Id = 63, Code = "dma", Flag = "dm.png", Label = "Dominica", Order = 0 },
                        new { Id = 64, Code = "dom", Flag = "do.png", Label = "Dominican Republic", Order = 0 },
                        new { Id = 65, Code = "ecu", Flag = "ec.png", Label = "Ecuador", Order = 0 },
                        new { Id = 66, Code = "egy", Flag = "eg.png", Label = "Egypt", Order = 0 },
                        new { Id = 67, Code = "slv", Flag = "sv.png", Label = "El Salvador", Order = 0 },
                        new { Id = 68, Code = "gnq", Flag = "gq.png", Label = "Equatorial Guinea", Order = 0 },
                        new { Id = 69, Code = "eri", Flag = "er.png", Label = "Eritrea", Order = 0 },
                        new { Id = 70, Code = "est", Flag = "ee.png", Label = "Estonia", Order = 0 },
                        new { Id = 71, Code = "eth", Flag = "et.png", Label = "Ethiopia", Order = 0 },
                        new { Id = 72, Code = "flk", Flag = "fk.png", Label = "Falkland Islands (Malvinas)", Order = 0 },
                        new { Id = 73, Code = "fro", Flag = "fo.png", Label = "Faroe Islands", Order = 0 },
                        new { Id = 74, Code = "fji", Flag = "fj.png", Label = "Fiji", Order = 0 },
                        new { Id = 75, Code = "fin", Flag = "fi.png", Label = "Finland", Order = 0 },
                        new { Id = 76, Code = "fra", Flag = "fr.png", Label = "France", Order = 0 },
                        new { Id = 77, Code = "guf", Flag = "gf.png", Label = "French Guiana", Order = 0 },
                        new { Id = 78, Code = "pyf", Flag = "pf.png", Label = "French Polynesia", Order = 0 },
                        new { Id = 79, Code = "fst", Flag = "tf.png", Label = "French Southern Territories", Order = 0 },
                        new { Id = 80, Code = "gab", Flag = "ga.png", Label = "Gabon", Order = 0 },
                        new { Id = 81, Code = "gmb", Flag = "gm.png", Label = "Gambia", Order = 0 },
                        new { Id = 82, Code = "geo", Flag = "ge.png", Label = "Georgia", Order = 0 },
                        new { Id = 83, Code = "deu", Flag = "de.png", Label = "Germany", Order = 0 },
                        new { Id = 84, Code = "gha", Flag = "gh.png", Label = "Ghana", Order = 0 },
                        new { Id = 85, Code = "gib", Flag = "gi.png", Label = "Gibraltar", Order = 0 },
                        new { Id = 86, Code = "grc", Flag = "gr.png", Label = "Greece", Order = 0 },
                        new { Id = 87, Code = "grl", Flag = "gl.png", Label = "Greenland", Order = 0 },
                        new { Id = 88, Code = "grd", Flag = "gd.png", Label = "Grenada", Order = 0 },
                        new { Id = 89, Code = "glp", Flag = "gp.png", Label = "Guadeloupe", Order = 0 },
                        new { Id = 90, Code = "gum", Flag = "gu.png", Label = "Guam", Order = 0 },
                        new { Id = 91, Code = "gtm", Flag = "gt.png", Label = "Guatemala", Order = 0 },
                        new { Id = 92, Code = "ggy", Flag = "gg.png", Label = "Guernsey", Order = 0 },
                        new { Id = 93, Code = "gin", Flag = "gn.png", Label = "Guinea", Order = 0 },
                        new { Id = 94, Code = "gnb", Flag = "gw.png", Label = "Guinea-Bissau", Order = 0 },
                        new { Id = 95, Code = "guy", Flag = "gy.png", Label = "Guyana", Order = 0 },
                        new { Id = 96, Code = "hti", Flag = "ht.png", Label = "Haiti", Order = 0 },
                        new { Id = 97, Code = "him", Flag = "hm.png", Label = "Heard Island and McDonald Islands", Order = 0 },
                        new { Id = 98, Code = "vat", Flag = "va.png", Label = "Holy See (Vatican City State)", Order = 0 },
                        new { Id = 99, Code = "hnd", Flag = "hn.png", Label = "Honduras", Order = 0 },
                        new { Id = 100, Code = "hkg", Flag = "hk.png", Label = "Hong Kong", Order = 0 },
                        new { Id = 101, Code = "hun", Flag = "hu.png", Label = "Hungary", Order = 0 },
                        new { Id = 102, Code = "isl", Flag = "is.png", Label = "Iceland", Order = 0 },
                        new { Id = 103, Code = "ind", Flag = "in.png", Label = "India", Order = 0 },
                        new { Id = 104, Code = "idn", Flag = "id.png", Label = "Indonesia", Order = 0 },
                        new { Id = 105, Code = "irn", Flag = "ir.png", Label = "Iran, Islamic Republic of", Order = 0 },
                        new { Id = 106, Code = "irq", Flag = "iq.png", Label = "Iraq", Order = 0 },
                        new { Id = 107, Code = "irl", Flag = "ie.png", Label = "Ireland", Order = 0 },
                        new { Id = 108, Code = "imn", Flag = "im.png", Label = "Isle of Man", Order = 0 },
                        new { Id = 109, Code = "isr", Flag = "il.png", Label = "Israel", Order = 0 },
                        new { Id = 110, Code = "ita", Flag = "it.png", Label = "Italy", Order = 0 },
                        new { Id = 111, Code = "jam", Flag = "jm.png", Label = "Jamaica", Order = 0 },
                        new { Id = 112, Code = "jpn", Flag = "jp.png", Label = "Japan", Order = 0 },
                        new { Id = 113, Code = "jey", Flag = "je.png", Label = "Jersey", Order = 0 },
                        new { Id = 114, Code = "jor", Flag = "jo.png", Label = "Jordan", Order = 0 },
                        new { Id = 115, Code = "kaz", Flag = "kz.png", Label = "Kazakhstan", Order = 0 },
                        new { Id = 116, Code = "ken", Flag = "ke.png", Label = "Kenya", Order = 0 },
                        new { Id = 117, Code = "kir", Flag = "ki.png", Label = "Kiribati", Order = 0 },
                        new { Id = 118, Code = "prk", Flag = "kp.png", Label = "Korea, Democratic People's Republic of", Order = 0 },
                        new { Id = 119, Code = "kor", Flag = "kr.png", Label = "Korea, Republic of", Order = 0 },
                        new { Id = 120, Code = "kwt", Flag = "kw.png", Label = "Kuwait", Order = 0 },
                        new { Id = 121, Code = "kgz", Flag = "kg.png", Label = "Kyrgyzstan", Order = 0 },
                        new { Id = 122, Code = "lao", Flag = "la.png", Label = "Lao People's Democratic Republic", Order = 0 },
                        new { Id = 123, Code = "lva", Flag = "lv.png", Label = "Latvia", Order = 0 },
                        new { Id = 124, Code = "lbn", Flag = "lb.png", Label = "Lebanon", Order = 0 },
                        new { Id = 125, Code = "lso", Flag = "ls.png", Label = "Lesotho", Order = 0 },
                        new { Id = 126, Code = "lbr", Flag = "lr.png", Label = "Liberia", Order = 0 },
                        new { Id = 127, Code = "lby", Flag = "ly.png", Label = "Libyan Arab Jamahiriya", Order = 0 },
                        new { Id = 128, Code = "lie", Flag = "li.png", Label = "Liechtenstein", Order = 0 },
                        new { Id = 129, Code = "ltu", Flag = "lt.png", Label = "Lithuania", Order = 0 },
                        new { Id = 130, Code = "lux", Flag = "lu.png", Label = "Luxembourg", Order = 0 },
                        new { Id = 131, Code = "mac", Flag = "mo.png", Label = "Macao", Order = 0 },
                        new { Id = 132, Code = "mkd", Flag = "mk.png", Label = "Macedonia, The former Yugoslav Republic of", Order = 0 },
                        new { Id = 133, Code = "mdg", Flag = "mg.png", Label = "Madagascar", Order = 0 },
                        new { Id = 134, Code = "mwi", Flag = "mw.png", Label = "Malawi", Order = 0 },
                        new { Id = 135, Code = "mys", Flag = "my.png", Label = "Malaysia", Order = 0 },
                        new { Id = 136, Code = "mdv", Flag = "mv.png", Label = "Maldives", Order = 0 },
                        new { Id = 137, Code = "mli", Flag = "ml.png", Label = "Mali", Order = 0 },
                        new { Id = 138, Code = "mlt", Flag = "mt.png", Label = "Malta", Order = 0 },
                        new { Id = 139, Code = "mhl", Flag = "mh.png", Label = "Marshall Islands", Order = 0 },
                        new { Id = 140, Code = "mtq", Flag = "mq.png", Label = "Martinique", Order = 0 },
                        new { Id = 141, Code = "mrt", Flag = "mr.png", Label = "Mauritania", Order = 0 },
                        new { Id = 142, Code = "mus", Flag = "mu.png", Label = "Mauritius", Order = 0 },
                        new { Id = 143, Code = "myt", Flag = "yt.png", Label = "Mayotte", Order = 0 },
                        new { Id = 144, Code = "mex", Flag = "mx.png", Label = "Mexico", Order = 0 },
                        new { Id = 145, Code = "fsm", Flag = "fm.png", Label = "Micronesia, Federated States of", Order = 0 },
                        new { Id = 146, Code = "mda", Flag = "md.png", Label = "Moldova, Republic of", Order = 0 },
                        new { Id = 147, Code = "mco", Flag = "mc.png", Label = "Monaco", Order = 0 },
                        new { Id = 148, Code = "mng", Flag = "mn.png", Label = "Mongolia", Order = 0 },
                        new { Id = 149, Code = "mne", Flag = "me.png", Label = "Montenegro", Order = 0 },
                        new { Id = 150, Code = "msr", Flag = "ms.png", Label = "Montserrat", Order = 0 },
                        new { Id = 151, Code = "mar", Flag = "ma.png", Label = "Morocco", Order = 0 },
                        new { Id = 152, Code = "moz", Flag = "mz.png", Label = "Mozambique", Order = 0 },
                        new { Id = 153, Code = "mmr", Flag = "mm.png", Label = "Myanmar", Order = 0 },
                        new { Id = 154, Code = "nam", Flag = "na.png", Label = "Namibia", Order = 0 },
                        new { Id = 155, Code = "nru", Flag = "nr.png", Label = "Nauru", Order = 0 },
                        new { Id = 156, Code = "npl", Flag = "np.png", Label = "Nepal", Order = 0 },
                        new { Id = 157, Code = "nld", Flag = "nl.png", Label = "Netherlands", Order = 0 },
                        new { Id = 158, Code = "ncl", Flag = "nc.png", Label = "New Caledonia", Order = 0 },
                        new { Id = 159, Code = "nzl", Flag = "nz.png", Label = "New Zealand", Order = 0 },
                        new { Id = 160, Code = "nic", Flag = "ni.png", Label = "Nicaragua", Order = 0 },
                        new { Id = 161, Code = "ner", Flag = "ne.png", Label = "Niger", Order = 0 },
                        new { Id = 162, Code = "nga", Flag = "ng.png", Label = "Nigeria", Order = 0 },
                        new { Id = 163, Code = "niu", Flag = "nu.png", Label = "Niue", Order = 0 },
                        new { Id = 164, Code = "nfk", Flag = "nf.png", Label = "Norfolk Island", Order = 0 },
                        new { Id = 165, Code = "mnp", Flag = "mp.png", Label = "Northern Mariana Islands", Order = 0 },
                        new { Id = 166, Code = "nor", Flag = "no.png", Label = "Norway", Order = 0 },
                        new { Id = 167, Code = "omn", Flag = "om.png", Label = "Oman", Order = 0 },
                        new { Id = 168, Code = "pak", Flag = "pk.png", Label = "Pakistan", Order = 0 },
                        new { Id = 169, Code = "plw", Flag = "pw.png", Label = "Palau", Order = 0 },
                        new { Id = 170, Code = "pse", Flag = "ps.png", Label = "Palestinian Territory, Occupied", Order = 0 },
                        new { Id = 171, Code = "pan", Flag = "pa.png", Label = "Panama", Order = 0 },
                        new { Id = 172, Code = "png", Flag = "pg.png", Label = "Papua New Guinea", Order = 0 },
                        new { Id = 173, Code = "pry", Flag = "py.png", Label = "Paraguay", Order = 0 },
                        new { Id = 174, Code = "per", Flag = "pe.png", Label = "Peru", Order = 0 },
                        new { Id = 175, Code = "phl", Flag = "ph.png", Label = "Philippines", Order = 0 },
                        new { Id = 176, Code = "pcn", Flag = "pn.png", Label = "Pitcairn", Order = 0 },
                        new { Id = 177, Code = "pol", Flag = "pl.png", Label = "Poland", Order = 0 },
                        new { Id = 178, Code = "prt", Flag = "pt.png", Label = "Portugal", Order = 0 },
                        new { Id = 179, Code = "pri", Flag = "pr.png", Label = "Puerto Rico", Order = 0 },
                        new { Id = 180, Code = "qat", Flag = "qa.png", Label = "Qatar", Order = 0 },
                        new { Id = 181, Code = "reu", Flag = "re.png", Label = "Reunion", Order = 0 },
                        new { Id = 182, Code = "rou", Flag = "ro.png", Label = "Romania", Order = 0 },
                        new { Id = 183, Code = "rus", Flag = "ru.png", Label = "Russian Federation", Order = 0 },
                        new { Id = 184, Code = "rwa", Flag = "rw.png", Label = "Rwanda", Order = 0 },
                        new { Id = 185, Code = "blm", Flag = "bl.png", Label = "Saint Barthelemy", Order = 0 },
                        new { Id = 186, Code = "shn", Flag = "sh.png", Label = "Saint Helena, Ascension and Tristan Da Cunha", Order = 0 },
                        new { Id = 187, Code = "kna", Flag = "kn.png", Label = "Saint Kitts and Nevis", Order = 0 },
                        new { Id = 188, Code = "lca", Flag = "lc.png", Label = "Saint Lucia", Order = 0 },
                        new { Id = 189, Code = "maf", Flag = "mf.png", Label = "Saint Martin (French Part)", Order = 0 },
                        new { Id = 190, Code = "spm", Flag = "pm.png", Label = "Saint Pierre and Miquelon", Order = 0 },
                        new { Id = 191, Code = "vct", Flag = "vc.png", Label = "Saint Vincent and The Grenadines", Order = 0 },
                        new { Id = 192, Code = "wsm", Flag = "ws.png", Label = "Samoa", Order = 0 },
                        new { Id = 193, Code = "smr", Flag = "sm.png", Label = "San Marino", Order = 0 },
                        new { Id = 194, Code = "stp", Flag = "st.png", Label = "Sao Tome and Principe", Order = 0 },
                        new { Id = 195, Code = "sau", Flag = "sa.png", Label = "Saudi Arabia", Order = 0 },
                        new { Id = 196, Code = "sen", Flag = "sn.png", Label = "Senegal", Order = 0 },
                        new { Id = 197, Code = "srb", Flag = "rs.png", Label = "Serbia", Order = 0 },
                        new { Id = 198, Code = "syc", Flag = "sc.png", Label = "Seychelles", Order = 0 },
                        new { Id = 199, Code = "sle", Flag = "sl.png", Label = "Sierra Leone", Order = 0 },
                        new { Id = 200, Code = "sgp", Flag = "sg.png", Label = "Singapore", Order = 0 },
                        new { Id = 201, Code = "sxm", Flag = "sx.png", Label = "Sint Maarten (Dutch Part)", Order = 0 },
                        new { Id = 202, Code = "svk", Flag = "sk.png", Label = "Slovakia", Order = 0 },
                        new { Id = 203, Code = "svn", Flag = "si.png", Label = "Slovenia", Order = 0 },
                        new { Id = 204, Code = "slb", Flag = "sb.png", Label = "Solomon Islands", Order = 0 },
                        new { Id = 205, Code = "som", Flag = "so.png", Label = "Somalia", Order = 0 },
                        new { Id = 206, Code = "zaf", Flag = "za.png", Label = "South Africa", Order = 0 },
                        new { Id = 207, Code = "sgt", Flag = "gs.png", Label = "South Georgia and The South Sandwich Islands", Order = 0 },
                        new { Id = 208, Code = "ssd", Flag = "ss.png", Label = "South Sudan", Order = 0 },
                        new { Id = 209, Code = "esp", Flag = "es.png", Label = "Spain", Order = 0 },
                        new { Id = 210, Code = "lka", Flag = "lk.png", Label = "Sri Lanka", Order = 0 },
                        new { Id = 211, Code = "sdn", Flag = "sd.png", Label = "Sudan", Order = 0 },
                        new { Id = 212, Code = "sur", Flag = "sr.png", Label = "Suriname", Order = 0 },
                        new { Id = 213, Code = "sjm", Flag = "sj.png", Label = "Svalbard and Jan Mayen", Order = 0 },
                        new { Id = 214, Code = "swz", Flag = "sz.png", Label = "Swaziland", Order = 0 },
                        new { Id = 215, Code = "swe", Flag = "se.png", Label = "Sweden", Order = 0 },
                        new { Id = 216, Code = "che", Flag = "ch.png", Label = "Switzerland", Order = 0 },
                        new { Id = 217, Code = "syr", Flag = "sy.png", Label = "Syrian Arab Republic", Order = 0 },
                        new { Id = 218, Code = "tpc", Flag = "tw.png", Label = "Taiwan, Province of China", Order = 0 },
                        new { Id = 219, Code = "tjk", Flag = "tj.png", Label = "Tajikistan", Order = 0 },
                        new { Id = 220, Code = "tza", Flag = "tz.png", Label = "Tanzania, United Republic of", Order = 0 },
                        new { Id = 221, Code = "tha", Flag = "th.png", Label = "Thailand", Order = 0 },
                        new { Id = 222, Code = "tls", Flag = "tl.png", Label = "Timor-Leste", Order = 0 },
                        new { Id = 223, Code = "tgo", Flag = "tg.png", Label = "Togo", Order = 0 },
                        new { Id = 224, Code = "tkl", Flag = "tk.png", Label = "Tokelau", Order = 0 },
                        new { Id = 225, Code = "ton", Flag = "to.png", Label = "Tonga", Order = 0 },
                        new { Id = 226, Code = "tto", Flag = "tt.png", Label = "Trinidad and Tobago", Order = 0 },
                        new { Id = 227, Code = "tun", Flag = "tn.png", Label = "Tunisia", Order = 0 },
                        new { Id = 228, Code = "tur", Flag = "tr.png", Label = "Turkey", Order = 0 },
                        new { Id = 229, Code = "tkm", Flag = "tm.png", Label = "Turkmenistan", Order = 0 },
                        new { Id = 230, Code = "tca", Flag = "tc.png", Label = "Turks and Caicos Islands", Order = 0 },
                        new { Id = 231, Code = "tuv", Flag = "tv.png", Label = "Tuvalu", Order = 0 },
                        new { Id = 232, Code = "uga", Flag = "ug.png", Label = "Uganda", Order = 0 },
                        new { Id = 233, Code = "ukr", Flag = "ua.png", Label = "Ukraine", Order = 0 },
                        new { Id = 234, Code = "are", Flag = "ae.png", Label = "United Arab Emirates", Order = 0 },
                        new { Id = 235, Code = "gbr", Flag = "gb.png", Label = "United Kingdom", Order = 0 },
                        new { Id = 236, Code = "usa", Flag = "us.png", Label = "United States", Order = 0 },
                        new { Id = 237, Code = "usm", Flag = "um.png", Label = "United States Minor Outlying Islands", Order = 0 },
                        new { Id = 238, Code = "ury", Flag = "uy.png", Label = "Uruguay", Order = 0 },
                        new { Id = 239, Code = "uzb", Flag = "uz.png", Label = "Uzbekistan", Order = 0 },
                        new { Id = 240, Code = "vut", Flag = "vu.png", Label = "Vanuatu", Order = 0 },
                        new { Id = 241, Code = "ven", Flag = "ve.png", Label = "Venezuela, Bolivarian Republic of", Order = 0 },
                        new { Id = 242, Code = "vnm", Flag = "vn.png", Label = "Viet Nam", Order = 0 },
                        new { Id = 243, Code = "vgb", Flag = "vg.png", Label = "Virgin Islands, British", Order = 0 },
                        new { Id = 244, Code = "vir", Flag = "vi.png", Label = "Virgin Islands, U.S.", Order = 0 },
                        new { Id = 245, Code = "wlf", Flag = "wf.png", Label = "Wallis and Futuna", Order = 0 },
                        new { Id = 246, Code = "esh", Flag = "eh.png", Label = "Western Sahara", Order = 0 },
                        new { Id = 247, Code = "yem", Flag = "ye.png", Label = "Yemen", Order = 0 },
                        new { Id = 248, Code = "zmb", Flag = "zm.png", Label = "Zambia", Order = 0 },
                        new { Id = 249, Code = "zwe", Flag = "zw.png", Label = "Zimbabwe", Order = 0 }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Injury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PlayerId")
                        .IsRequired();

                    b.Property<int>("Severity");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Injuries");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTime?>("FromDate");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(10);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("Size")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.PlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsNatural");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PlayerId");

                    b.Property<int>("PositionId");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.HasAlternateKey("PlayerId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("Column");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Order");

                    b.Property<int>("Row");

                    b.Property<int>("Side");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Positions");

                    b.HasData(
                        new { Id = 1, Code = "GB", Column = 1, Label = "Gardien", Order = 1, Row = 6, Side = 1, Type = 0 },
                        new { Id = 2, Code = "L", Column = 1, Label = "Libéro", Order = 2, Row = 5, Side = 1, Type = 1 },
                        new { Id = 3, Code = "DG", Column = 0, Label = "Défenseur gauche", Order = 3, Row = 4, Side = 0, Type = 2 },
                        new { Id = 4, Code = "DC", Column = 1, Label = "Défenseur central", Order = 4, Row = 4, Side = 1, Type = 3 },
                        new { Id = 5, Code = "DD", Column = 2, Label = "Défenseur Droit", Order = 5, Row = 4, Side = 2, Type = 2 },
                        new { Id = 6, Code = "LG", Column = 0, Label = "Latéral Gauche", Order = 6, Row = 3, Side = 0, Type = 4 },
                        new { Id = 7, Code = "LD", Column = 2, Label = "Latéral Droit", Order = 7, Row = 3, Side = 0, Type = 4 },
                        new { Id = 8, Code = "MDC", Column = 1, Label = "Milieu défensif", Order = 8, Row = 3, Side = 1, Type = 5 },
                        new { Id = 9, Code = "MG", Column = 0, Label = "Milieu gauche", Order = 9, Row = 2, Side = 0, Type = 6 },
                        new { Id = 10, Code = "MC", Column = 1, Label = "Milieu central", Order = 10, Row = 2, Side = 1, Type = 6 },
                        new { Id = 11, Code = "MD", Column = 2, Label = "Milieu Droit", Order = 11, Row = 2, Side = 2, Type = 6 },
                        new { Id = 12, Code = "MOG", Column = 0, Label = "Milieu offensif gauche", Order = 12, Row = 1, Side = 0, Type = 7 },
                        new { Id = 13, Code = "MOC", Column = 1, Label = "Milieu offensif central", Order = 13, Row = 1, Side = 1, Type = 7 },
                        new { Id = 14, Code = "MOD", Column = 2, Label = "Milieu offensif Droit", Order = 14, Row = 1, Side = 2, Type = 7 },
                        new { Id = 15, Code = "AG", Column = 0, Label = "Ailier gauche", Order = 15, Row = 0, Side = 0, Type = 8 },
                        new { Id = 16, Code = "ATT", Column = 1, Label = "Attaquant", Order = 16, Row = 0, Side = 1, Type = 9 },
                        new { Id = 17, Code = "AD", Column = 2, Label = "Ailier Droit", Order = 17, Row = 0, Side = 2, Type = 8 }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Roster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SeasonId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SeasonId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Rosters");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.RosterPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsMutation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("LicenseState")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Number");

                    b.Property<int>("PlayerId");

                    b.Property<int>("RosterId");

                    b.Property<int>("SquadId");

                    b.HasKey("Id");

                    b.HasAlternateKey("RosterId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SquadId");

                    b.ToTable("RosterPlayers");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Order");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.ToTable("Seasons");

                    b.HasData(
                        new { Id = 1, Code = "17/18", EndDate = new DateTime(2018, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), Label = "2017/2018", Order = 2, StartDate = new DateTime(2017, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, Code = "18/19", EndDate = new DateTime(2019, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), Label = "2018/2019", Order = 1, StartDate = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Squad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RosterId");

                    b.HasKey("Id");

                    b.HasIndex("RosterId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsCancelled");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Place");

                    b.Property<int?>("RosterId")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("RosterId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.TrainingAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attendance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Reason");

                    b.Property<int>("RosterPlayerId");

                    b.Property<int>("TrainingId");

                    b.HasKey("Id");

                    b.HasAlternateKey("TrainingId", "RosterPlayerId");

                    b.HasIndex("RosterPlayerId");

                    b.ToTable("TrainingAttendances");
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Login = "andre", Mail = "andre.cs2i@gmail.com", Name = "Stéphane ANDRE (Home)", Password = "qRBfE9MoPFs=" },
                        new { Id = 2, Login = "stephane.andre", Mail = "stephane.andre@modis.com", Name = "Stéphane ANDRE (Modis)", Password = "qRBfE9MoPFs=" }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Email", b =>
                {
                    b.HasBaseType("My.CoachManager.Domain.Entities.Contact");


                    b.ToTable("Email");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new { Id = 1, Default = true, Label = "Test", PersonId = 1, Value = "andre.cs2i@gmail.com" },
                        new { Id = 2, Default = false, Label = "Test2", PersonId = 1, Value = "vincentsourdeix@gmail.com" },
                        new { Id = 4, Default = true, Label = "Principale", PersonId = 2, Value = "visourdeix@gmail.com" },
                        new { Id = 5, Default = false, Label = "Pub", PersonId = 2, Value = "vincentsourdeix@gmail.com" }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Phone", b =>
                {
                    b.HasBaseType("My.CoachManager.Domain.Entities.Contact");


                    b.ToTable("Phone");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new { Id = 3, Default = true, Label = "Test", PersonId = 1, Value = "0664411391" },
                        new { Id = 6, Default = true, Label = "Portable", PersonId = 2, Value = "0679189256" }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Player", b =>
                {
                    b.HasBaseType("My.CoachManager.Domain.Entities.Person");

                    b.Property<int?>("CategoryId")
                        .IsRequired();

                    b.Property<int?>("Height");

                    b.Property<int>("Laterality")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int?>("ShoesSize");

                    b.Property<int?>("Weight");

                    b.HasIndex("CategoryId");

                    b.ToTable("Players");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new { Id = 1, Birthdate = new DateTime(1989, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), CountryId = 76, FirstName = "Stéphane", FromDate = new DateTime(2007, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), Gender = 1, LastName = "André", PlaceOfBirth = "Nevers", Size = "L", CategoryId = 13, Height = 175, Laterality = 2, ShoesSize = 44, Weight = 75 },
                        new { Id = 2, AddressId = 1, Birthdate = new DateTime(1986, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), CountryId = 76, FirstName = "Vincent", Gender = 0, LastName = "Sourdeix", LicenseNumber = "123456789", PlaceOfBirth = "Tulle", Size = "L", CategoryId = 3, Laterality = 1, ShoesSize = 42 }
                    );
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Address", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Contact", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Person", "Person")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Injury", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Player", "Player")
                        .WithMany("Injuries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Person", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("My.CoachManager.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.PlayerPosition", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Player", "Player")
                        .WithMany("Positions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("My.CoachManager.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Roster", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("My.CoachManager.Domain.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.RosterPlayer", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("My.CoachManager.Domain.Entities.Roster", "Roster")
                        .WithMany("Players")
                        .HasForeignKey("RosterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("My.CoachManager.Domain.Entities.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Squad", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Roster", "Roster")
                        .WithMany("Squads")
                        .HasForeignKey("RosterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Training", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Roster", "Roster")
                        .WithMany()
                        .HasForeignKey("RosterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.TrainingAttendance", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.RosterPlayer", "RosterPlayer")
                        .WithMany("TrainingAttendances")
                        .HasForeignKey("RosterPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("My.CoachManager.Domain.Entities.Training", "Training")
                        .WithMany("Attendances")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("My.CoachManager.Domain.Entities.Player", b =>
                {
                    b.HasOne("My.CoachManager.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}

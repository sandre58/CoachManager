<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Controls.Parameters;assembly=My.CoachManager.Presentation.Controls"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Controls;assembly=My.CoachManager.Presentation.Controls"
                    xmlns:strings="clr-namespace:My.CoachManager.CrossCutting.Core.Resources;assembly=My.CoachManager.CrossCutting.Core">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Geometry.xaml" />
        <ResourceDictionary Source="../Base/Fonts.xaml" />
        <ResourceDictionary Source="TextBlock.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Normal buttons -->
    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Margin" Value="0" />
            </Style>
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkControl}" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource ControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.PressedBorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels"  Value="True" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FontSize" Value="{StaticResource NormalFontSize}" />
        <Setter Property="parameters:ControlParameters.CharacterCasing" Value="Upper" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Name="Base"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{TemplateBinding parameters:ControlParameters.CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentControl x:Name="PART_ContentPresenter"
                                        Focusable="False"
                                        IsTabStop="False"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        parameters:ControlParameters.CharacterCasing="{TemplateBinding parameters:ControlParameters.CharacterCasing}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        TextBlock.FontWeight="{TemplateBinding FontWeight}"
                                        TextBlock.FontSize="{TemplateBinding FontSize}"
                                        Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedForeground)}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SmallButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="FontSize" Value="{StaticResource MidSmallFontSize}" />
        <Setter Property="Padding" Value="3" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}" />

    <!-- Circle buttons -->
    <Style x:Key="CircleButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource DarkControl}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="{StaticResource DefaultMargin}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource DarkControl}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Ellipse x:Name="Base" Fill="{TemplateBinding Background}"
                                StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}}"
                                Stroke="{TemplateBinding BorderBrush}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Padding="{TemplateBinding Padding}">
                            <ContentControl x:Name="PART_ContentPresenter"
                                        Focusable="False"
                                        IsTabStop="False"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   parameters:ControlParameters.CharacterCasing="{TemplateBinding parameters:ControlParameters.CharacterCasing}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                   TextBlock.FontWeight="Bold" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedForeground)}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconAndTextButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource DarkControl}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="{StaticResource DefaultMargin}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource DarkControl}" />
        <Setter Property="parameters:ControlParameters.CharacterCasing" Value="Normal" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Base">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                        
                        <Ellipse Grid.Column="0" x:Name="ellipse" Fill="{TemplateBinding Background}"
                                 Height="18" Width="18"
                                StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}}"
                                Stroke="{TemplateBinding BorderBrush}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Border x:Name="icon" Grid.Column="0" Padding="{TemplateBinding Padding}" Height="18" Width="18">
                        <controls:Icon Size="Custom" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                       Content="{Binding (parameters:ControlParameters.Icon), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}"
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}"/>
                        </Border>

                        <Border Grid.Column="1" x:Name="content">
                            <ContentControl x:Name="PART_ContentPresenter"
                                        Focusable="False"
                                        IsTabStop="False"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   parameters:ControlParameters.CharacterCasing="{TemplateBinding parameters:ControlParameters.CharacterCasing}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                   Foreground="{DynamicResource DarkControlPressed}" />
                        </Border>
                    </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_ContentPresenter" Property="Foreground" Value="{DynamicResource NormalForeground}" />
                            <Setter TargetName="content" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            <Setter TargetName="content" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_ContentPresenter" Property="Foreground" Value="{DynamicResource NormalForeground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_ContentPresenter" Property="Foreground" Value="{DynamicResource Accent}" />
                        </Trigger>

                        <Trigger Property="parameters:ButtonParameters.ButtonAlignment" Value="Right">
                            <Setter TargetName="ellipse" Property="Grid.Column" Value="2" />
                            <Setter TargetName="icon" Property="Grid.Column" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBackground)}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedBorderBrush)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.PressedForeground)}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconAndTextColorButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource IconAndTextButtonStyle}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="{DynamicResource ColorOpacity}" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.FocusBackground">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="{DynamicResource ColorOpacity}" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.PressedBackground">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource White}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource White}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{DynamicResource White}" />
    </Style>


    <Style x:Key="CircleIconButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource CircleButtonStyle}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <controls:Icon Size="Custom" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                   Content="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}"
                                   Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Text button -->
    <Style x:Key="TextButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource NormalForeground}" />
        <Setter Property="Padding" Value="0,0,0,2" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Foreground" Value="{DynamicResource DarkControlPressed}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="{DynamicResource Transparent}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.CharacterCasing" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="IconButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextButtonStyle}">
        <Setter Property="Height" Value="17" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <controls:Icon Size="Custom" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                   Content="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}"
                                   Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- HyperLink -->
    <Style TargetType="{x:Type controls:HyperlinkButton}" BasedOn="{StaticResource TextButtonStyle}">
        <Setter Property="TextBlock.TextDecorations" Value="Underline" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock TextDecorations="Underline" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ArrowHyperlinkButtonStyle" TargetType="{x:Type controls:HyperlinkButton}" BasedOn="{StaticResource {x:Type controls:HyperlinkButton}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock TextDecorations="Underline" Text="{Binding}" />
                        <controls:Icon Size="Custom" Content="{StaticResource ArrowRightGeometry}" Height="10"
                                       Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:HyperlinkButton}}}"
                                       Margin="5,2,0,0" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Specific for controls -->
    <Style x:Key="TextBoxButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth)}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth)}" />
        <Setter Property="Margin" Value="{StaticResource DefaultHorizontalMargin}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonFontFamily)}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonFontSize)}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="TextBoxCircleButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource CircleIconButtonStyle}">
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth)}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth)}" />
        <Setter Property="Margin" Value="{StaticResource DefaultHorizontalMargin}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonFontFamily)}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonFontSize)}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="TextBoxColorCircleButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxCircleButtonStyle}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="{DynamicResource ColorOpacity}" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="parameters:ControlParameters.PressedBackground">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ButtonBase}, Path=(parameters:ControlParameters.Color), Converter={StaticResource ObjectToPropertyConverter}, ConverterParameter=Color}" Opacity="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource White}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource White}" />
        <Setter Property="parameters:ControlParameters.PressedForeground" Value="{DynamicResource White}" />
    </Style>

    <Style x:Key="ClearTextBoxButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxCircleButtonStyle}">
        <Setter Property="Content" Value="{StaticResource CancelGeometry}" />
        <Setter Property="ToolTip" Value="{x:Static strings:ControlResources.ClearText}" />
        <Setter Property="parameters:TextBoxParameters.IsClearTextButtonBehaviorEnabled" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ClearTextButton), Mode=OneWay}" />
    </Style>

    <Style x:Key="DatePickerButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxButtonStyle}">
        <Setter Property="Content" Value="{StaticResource CalendarGeometry}" />
    </Style>

    <Style x:Key="TimePickerButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxButtonStyle}">
        <Setter Property="Content" Value="{StaticResource ClockGeometry}" />
    </Style>

    <Style x:Key="PlusNumericUpDownButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxButtonStyle}">
        <Setter Property="Content" Value="{StaticResource PlusGeometry}" />
    </Style>

    <Style x:Key="MinusNumericUpDownButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxButtonStyle}">
        <Setter Property="Content" Value="{StaticResource MinusGeometry}" />
    </Style>

    <Style x:Key="RemoveButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxColorCircleButtonStyle}">
        <Setter Property="Content" Value="{StaticResource MinusGeometry}" />
        <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Negative}" />
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource TextBoxColorCircleButtonStyle}">
        <Setter Property="Content" Value="{StaticResource PlusGeometry}" />
        <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Positive}" />
    </Style>

    <Style x:Key="AddTextAndIconButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource IconAndTextColorButtonStyle}">
        <Setter Property="parameters:ControlParameters.Icon" Value="{StaticResource PlusGeometry}" />
        <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Positive}" />
    </Style>

    <Style x:Key="EditButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Content" Value="{StaticResource EditPageGeometry}" />
    </Style>

    <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource TextButtonStyle}" />

    <!-- System buttons -->
    <Style x:Key="SystemButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource Transparent}" />
        <Setter Property="Foreground" Value="{DynamicResource MenuForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource AccentControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="{DynamicResource AccentControlPressed}" />
        <Setter Property="parameters:ControlParameters.CharacterCasing" Value="Normal" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="MaxWidth" Value="34" />
        <Setter Property="MaxHeight" Value="34" />
        <Setter Property="Width" Value="34" />
        <Setter Property="Cursor" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>

    <Style x:Key="SystemCloseButtonStyle" TargetType="ButtonBase" BasedOn="{StaticResource SystemButtonStyle}">
        <Setter Property="parameters:ControlParameters.PressedBackground" Value="Red" />
    </Style>
</ResourceDictionary>
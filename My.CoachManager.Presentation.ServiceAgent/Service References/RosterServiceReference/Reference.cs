//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using My.CoachManager.Application.Dtos;

namespace My.CoachManager.Presentation.ServiceAgent.RosterServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RosterServiceReference.IRosterService")]
    public interface IRosterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosters", ReplyAction="http://tempuri.org/IRosterService/GetRostersResponse")]
        RosterDto[] GetRosters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosters", ReplyAction="http://tempuri.org/IRosterService/GetRostersResponse")]
        System.Threading.Tasks.Task<RosterDto[]> GetRostersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveRoster", ReplyAction="http://tempuri.org/IRosterService/SaveRosterResponse")]
        RosterDto SaveRoster(RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveRoster", ReplyAction="http://tempuri.org/IRosterService/SaveRosterResponse")]
        System.Threading.Tasks.Task<RosterDto> SaveRosterAsync(RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveRoster", ReplyAction="http://tempuri.org/IRosterService/RemoveRosterResponse")]
        void RemoveRoster(RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveRoster", ReplyAction="http://tempuri.org/IRosterService/RemoveRosterResponse")]
        System.Threading.Tasks.Task RemoveRosterAsync(RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterById", ReplyAction="http://tempuri.org/IRosterService/GetRosterByIdResponse")]
        RosterDto GetRosterById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterById", ReplyAction="http://tempuri.org/IRosterService/GetRosterByIdResponse")]
        System.Threading.Tasks.Task<RosterDto> GetRosterByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRosterServiceChannel : My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RosterServiceClient : System.ServiceModel.ClientBase<My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService>, My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService {
        
        public RosterServiceClient() {
        }
        
        public RosterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RosterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RosterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RosterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RosterDto[] GetRosters() {
            return base.Channel.GetRosters();
        }
        
        public System.Threading.Tasks.Task<RosterDto[]> GetRostersAsync() {
            return base.Channel.GetRostersAsync();
        }
        
        public RosterDto SaveRoster(RosterDto dto) {
            return base.Channel.SaveRoster(dto);
        }
        
        public System.Threading.Tasks.Task<RosterDto> SaveRosterAsync(RosterDto dto) {
            return base.Channel.SaveRosterAsync(dto);
        }
        
        public void RemoveRoster(RosterDto dto) {
            base.Channel.RemoveRoster(dto);
        }
        
        public System.Threading.Tasks.Task RemoveRosterAsync(RosterDto dto) {
            return base.Channel.RemoveRosterAsync(dto);
        }
        
        public RosterDto GetRosterById(int id) {
            return base.Channel.GetRosterById(id);
        }
        
        public System.Threading.Tasks.Task<RosterDto> GetRosterByIdAsync(int id) {
            return base.Channel.GetRosterByIdAsync(id);
        }
    }
}

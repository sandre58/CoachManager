//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.CoachManager.Presentation.ServiceAgent.RosterServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RosterServiceReference.IRosterService")]
    public interface IRosterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosters", ReplyAction="http://tempuri.org/IRosterService/GetRostersResponse")]
        My.CoachManager.Application.Dtos.RosterDto[] GetRosters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosters", ReplyAction="http://tempuri.org/IRosterService/GetRostersResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto[]> GetRostersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveRoster", ReplyAction="http://tempuri.org/IRosterService/SaveRosterResponse")]
        int SaveRoster(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveRoster", ReplyAction="http://tempuri.org/IRosterService/SaveRosterResponse")]
        System.Threading.Tasks.Task<int> SaveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveRoster", ReplyAction="http://tempuri.org/IRosterService/RemoveRosterResponse")]
        void RemoveRoster(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveRoster", ReplyAction="http://tempuri.org/IRosterService/RemoveRosterResponse")]
        System.Threading.Tasks.Task RemoveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterById", ReplyAction="http://tempuri.org/IRosterService/GetRosterByIdResponse")]
        My.CoachManager.Application.Dtos.RosterDto GetRosterById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterById", ReplyAction="http://tempuri.org/IRosterService/GetRosterByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetPlayers", ReplyAction="http://tempuri.org/IRosterService/GetPlayersResponse")]
        My.CoachManager.Application.Dtos.RosterPlayerDto[] GetPlayers(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetPlayers", ReplyAction="http://tempuri.org/IRosterService/GetPlayersResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto[]> GetPlayersAsync(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/AddPlayers", ReplyAction="http://tempuri.org/IRosterService/AddPlayersResponse")]
        void AddPlayers(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/AddPlayers", ReplyAction="http://tempuri.org/IRosterService/AddPlayersResponse")]
        System.Threading.Tasks.Task AddPlayersAsync(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/MovePlayersInSquad", ReplyAction="http://tempuri.org/IRosterService/MovePlayersInSquadResponse")]
        void MovePlayersInSquad(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/MovePlayersInSquad", ReplyAction="http://tempuri.org/IRosterService/MovePlayersInSquadResponse")]
        System.Threading.Tasks.Task MovePlayersInSquadAsync(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemovePlayers", ReplyAction="http://tempuri.org/IRosterService/RemovePlayersResponse")]
        void RemovePlayers(int rosterId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemovePlayers", ReplyAction="http://tempuri.org/IRosterService/RemovePlayersResponse")]
        System.Threading.Tasks.Task RemovePlayersAsync(int rosterId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterPlayerById", ReplyAction="http://tempuri.org/IRosterService/GetRosterPlayerByIdResponse")]
        My.CoachManager.Application.Dtos.RosterPlayerDto GetRosterPlayerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterPlayerById", ReplyAction="http://tempuri.org/IRosterService/GetRosterPlayerByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto> GetRosterPlayerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/UpdatePlayer", ReplyAction="http://tempuri.org/IRosterService/UpdatePlayerResponse")]
        int UpdatePlayer(My.CoachManager.Application.Dtos.RosterPlayerDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/UpdatePlayer", ReplyAction="http://tempuri.org/IRosterService/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<int> UpdatePlayerAsync(My.CoachManager.Application.Dtos.RosterPlayerDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquads", ReplyAction="http://tempuri.org/IRosterService/GetSquadsResponse")]
        My.CoachManager.Application.Dtos.SquadDto[] GetSquads(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquads", ReplyAction="http://tempuri.org/IRosterService/GetSquadsResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto[]> GetSquadsAsync(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveSquad", ReplyAction="http://tempuri.org/IRosterService/SaveSquadResponse")]
        int SaveSquad(My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveSquad", ReplyAction="http://tempuri.org/IRosterService/SaveSquadResponse")]
        System.Threading.Tasks.Task<int> SaveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveSquad", ReplyAction="http://tempuri.org/IRosterService/RemoveSquadResponse")]
        void RemoveSquad(My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveSquad", ReplyAction="http://tempuri.org/IRosterService/RemoveSquadResponse")]
        System.Threading.Tasks.Task RemoveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquadById", ReplyAction="http://tempuri.org/IRosterService/GetSquadByIdResponse")]
        My.CoachManager.Application.Dtos.SquadDto GetSquadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquadById", ReplyAction="http://tempuri.org/IRosterService/GetSquadByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto> GetSquadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterFromSquad", ReplyAction="http://tempuri.org/IRosterService/GetRosterFromSquadResponse")]
        My.CoachManager.Application.Dtos.RosterDto GetRosterFromSquad(int squadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterFromSquad", ReplyAction="http://tempuri.org/IRosterService/GetRosterFromSquadResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterFromSquadAsync(int squadId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRosterServiceChannel : My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RosterServiceClient : System.ServiceModel.ClientBase<My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService>, My.CoachManager.Presentation.ServiceAgent.RosterServiceReference.IRosterService {
        
        public RosterServiceClient() {
        }
        
        public RosterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RosterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RosterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RosterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public My.CoachManager.Application.Dtos.RosterDto[] GetRosters() {
            return base.Channel.GetRosters();
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto[]> GetRostersAsync() {
            return base.Channel.GetRostersAsync();
        }
        
        public int SaveRoster(My.CoachManager.Application.Dtos.RosterDto dto) {
            return base.Channel.SaveRoster(dto);
        }
        
        public System.Threading.Tasks.Task<int> SaveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto) {
            return base.Channel.SaveRosterAsync(dto);
        }
        
        public void RemoveRoster(My.CoachManager.Application.Dtos.RosterDto dto) {
            base.Channel.RemoveRoster(dto);
        }
        
        public System.Threading.Tasks.Task RemoveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto) {
            return base.Channel.RemoveRosterAsync(dto);
        }
        
        public My.CoachManager.Application.Dtos.RosterDto GetRosterById(int id) {
            return base.Channel.GetRosterById(id);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterByIdAsync(int id) {
            return base.Channel.GetRosterByIdAsync(id);
        }
        
        public My.CoachManager.Application.Dtos.RosterPlayerDto[] GetPlayers(int rosterId) {
            return base.Channel.GetPlayers(rosterId);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto[]> GetPlayersAsync(int rosterId) {
            return base.Channel.GetPlayersAsync(rosterId);
        }
        
        public void AddPlayers(int squadId, int[] playerIds) {
            base.Channel.AddPlayers(squadId, playerIds);
        }
        
        public System.Threading.Tasks.Task AddPlayersAsync(int squadId, int[] playerIds) {
            return base.Channel.AddPlayersAsync(squadId, playerIds);
        }
        
        public void MovePlayersInSquad(int squadId, int[] playerIds) {
            base.Channel.MovePlayersInSquad(squadId, playerIds);
        }
        
        public System.Threading.Tasks.Task MovePlayersInSquadAsync(int squadId, int[] playerIds) {
            return base.Channel.MovePlayersInSquadAsync(squadId, playerIds);
        }
        
        public void RemovePlayers(int rosterId, int[] playerIds) {
            base.Channel.RemovePlayers(rosterId, playerIds);
        }
        
        public System.Threading.Tasks.Task RemovePlayersAsync(int rosterId, int[] playerIds) {
            return base.Channel.RemovePlayersAsync(rosterId, playerIds);
        }
        
        public My.CoachManager.Application.Dtos.RosterPlayerDto GetRosterPlayerById(int id) {
            return base.Channel.GetRosterPlayerById(id);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto> GetRosterPlayerByIdAsync(int id) {
            return base.Channel.GetRosterPlayerByIdAsync(id);
        }
        
        public int UpdatePlayer(My.CoachManager.Application.Dtos.RosterPlayerDto dto) {
            return base.Channel.UpdatePlayer(dto);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlayerAsync(My.CoachManager.Application.Dtos.RosterPlayerDto dto) {
            return base.Channel.UpdatePlayerAsync(dto);
        }
        
        public My.CoachManager.Application.Dtos.SquadDto[] GetSquads(int rosterId) {
            return base.Channel.GetSquads(rosterId);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto[]> GetSquadsAsync(int rosterId) {
            return base.Channel.GetSquadsAsync(rosterId);
        }
        
        public int SaveSquad(My.CoachManager.Application.Dtos.SquadDto dto) {
            return base.Channel.SaveSquad(dto);
        }
        
        public System.Threading.Tasks.Task<int> SaveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto) {
            return base.Channel.SaveSquadAsync(dto);
        }
        
        public void RemoveSquad(My.CoachManager.Application.Dtos.SquadDto dto) {
            base.Channel.RemoveSquad(dto);
        }
        
        public System.Threading.Tasks.Task RemoveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto) {
            return base.Channel.RemoveSquadAsync(dto);
        }
        
        public My.CoachManager.Application.Dtos.SquadDto GetSquadById(int id) {
            return base.Channel.GetSquadById(id);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto> GetSquadByIdAsync(int id) {
            return base.Channel.GetSquadByIdAsync(id);
        }
        
        public My.CoachManager.Application.Dtos.RosterDto GetRosterFromSquad(int squadId) {
            return base.Channel.GetRosterFromSquad(squadId);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterFromSquadAsync(int squadId) {
            return base.Channel.GetRosterFromSquadAsync(squadId);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using My.CoachManager.Application.Dtos;

namespace My.CoachManager.Presentation.ServiceAgent.SeasonServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SeasonServiceReference.ISeasonService")]
    public interface ISeasonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/GetSeasons", ReplyAction="http://tempuri.org/ISeasonService/GetSeasonsResponse")]
        SeasonDto[] GetSeasons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/GetSeasons", ReplyAction="http://tempuri.org/ISeasonService/GetSeasonsResponse")]
        System.Threading.Tasks.Task<SeasonDto[]> GetSeasonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/GetSeasonById", ReplyAction="http://tempuri.org/ISeasonService/GetSeasonByIdResponse")]
        SeasonDto GetSeasonById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/GetSeasonById", ReplyAction="http://tempuri.org/ISeasonService/GetSeasonByIdResponse")]
        System.Threading.Tasks.Task<SeasonDto> GetSeasonByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/SaveSeason", ReplyAction="http://tempuri.org/ISeasonService/SaveSeasonResponse")]
        SeasonDto SaveSeason(SeasonDto playerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/SaveSeason", ReplyAction="http://tempuri.org/ISeasonService/SaveSeasonResponse")]
        System.Threading.Tasks.Task<SeasonDto> SaveSeasonAsync(SeasonDto playerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/RemoveSeason", ReplyAction="http://tempuri.org/ISeasonService/RemoveSeasonResponse")]
        void RemoveSeason(SeasonDto playerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/RemoveSeason", ReplyAction="http://tempuri.org/ISeasonService/RemoveSeasonResponse")]
        System.Threading.Tasks.Task RemoveSeasonAsync(SeasonDto playerDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/UpdateOrders", ReplyAction="http://tempuri.org/ISeasonService/UpdateOrdersResponse")]
        void UpdateOrders(System.Collections.Generic.Dictionary<int, int> entities);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeasonService/UpdateOrders", ReplyAction="http://tempuri.org/ISeasonService/UpdateOrdersResponse")]
        System.Threading.Tasks.Task UpdateOrdersAsync(System.Collections.Generic.Dictionary<int, int> entities);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISeasonServiceChannel : My.CoachManager.Presentation.ServiceAgent.SeasonServiceReference.ISeasonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SeasonServiceClient : System.ServiceModel.ClientBase<My.CoachManager.Presentation.ServiceAgent.SeasonServiceReference.ISeasonService>, My.CoachManager.Presentation.ServiceAgent.SeasonServiceReference.ISeasonService {
        
        public SeasonServiceClient() {
        }
        
        public SeasonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SeasonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeasonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeasonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SeasonDto[] GetSeasons() {
            return base.Channel.GetSeasons();
        }
        
        public System.Threading.Tasks.Task<SeasonDto[]> GetSeasonsAsync() {
            return base.Channel.GetSeasonsAsync();
        }
        
        public SeasonDto GetSeasonById(int id) {
            return base.Channel.GetSeasonById(id);
        }
        
        public System.Threading.Tasks.Task<SeasonDto> GetSeasonByIdAsync(int id) {
            return base.Channel.GetSeasonByIdAsync(id);
        }
        
        public SeasonDto SaveSeason(SeasonDto playerDto) {
            return base.Channel.SaveSeason(playerDto);
        }
        
        public System.Threading.Tasks.Task<SeasonDto> SaveSeasonAsync(SeasonDto playerDto) {
            return base.Channel.SaveSeasonAsync(playerDto);
        }
        
        public void RemoveSeason(SeasonDto playerDto) {
            base.Channel.RemoveSeason(playerDto);
        }
        
        public System.Threading.Tasks.Task RemoveSeasonAsync(SeasonDto playerDto) {
            return base.Channel.RemoveSeasonAsync(playerDto);
        }
        
        public void UpdateOrders(System.Collections.Generic.Dictionary<int, int> entities) {
            base.Channel.UpdateOrders(entities);
        }
        
        public System.Threading.Tasks.Task UpdateOrdersAsync(System.Collections.Generic.Dictionary<int, int> entities) {
            return base.Channel.UpdateOrdersAsync(entities);
        }
    }
}

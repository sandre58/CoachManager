//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonServiceReference.IPersonService")]
    public interface IPersonService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetCountries", ReplyAction="http://tempuri.org/IPersonService/GetCountriesResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.CountryDto[]> GetCountriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPlayers", ReplyAction="http://tempuri.org/IPersonService/GetPlayersResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.PlayerDto[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPlayerById", ReplyAction="http://tempuri.org/IPersonService/GetPlayerByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.PlayerDto> GetPlayerByIdAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePlayer", ReplyAction="http://tempuri.org/IPersonService/SavePlayerResponse")]
        System.Threading.Tasks.Task<int> SavePlayerAsync(My.CoachManager.Application.Dtos.PlayerDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/RemovePlayer", ReplyAction="http://tempuri.org/IPersonService/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync(My.CoachManager.Application.Dtos.PlayerDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetCategoryFromDate", ReplyAction="http://tempuri.org/IPersonService/GetCategoryFromDateResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.CategoryDto> GetCategoryFromDateAsync(System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetInjuryById", ReplyAction="http://tempuri.org/IPersonService/GetInjuryByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.InjuryDto> GetInjuryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveInjury", ReplyAction="http://tempuri.org/IPersonService/SaveInjuryResponse")]
        System.Threading.Tasks.Task<int> SaveInjuryAsync(int playerId, My.CoachManager.Application.Dtos.InjuryDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/RemoveInjury", ReplyAction="http://tempuri.org/IPersonService/RemoveInjuryResponse")]
        System.Threading.Tasks.Task RemoveInjuryAsync(My.CoachManager.Application.Dtos.InjuryDto dto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IPersonServiceChannel : PersonServiceReference.IPersonService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class PersonServiceClient : System.ServiceModel.ClientBase<PersonServiceReference.IPersonService>, PersonServiceReference.IPersonService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PersonServiceClient() : 
                base(PersonServiceClient.GetDefaultBinding(), PersonServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPersonService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PersonServiceClient.GetBindingForEndpoint(endpointConfiguration), PersonServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PersonServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PersonServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.CountryDto[]> GetCountriesAsync()
        {
            return base.Channel.GetCountriesAsync();
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.PlayerDto[]> GetPlayersAsync()
        {
            return base.Channel.GetPlayersAsync();
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.PlayerDto> GetPlayerByIdAsync(int playerId)
        {
            return base.Channel.GetPlayerByIdAsync(playerId);
        }
        
        public System.Threading.Tasks.Task<int> SavePlayerAsync(My.CoachManager.Application.Dtos.PlayerDto dto)
        {
            return base.Channel.SavePlayerAsync(dto);
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync(My.CoachManager.Application.Dtos.PlayerDto dto)
        {
            return base.Channel.RemovePlayerAsync(dto);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.CategoryDto> GetCategoryFromDateAsync(System.DateTime fromDate, System.DateTime toDate)
        {
            return base.Channel.GetCategoryFromDateAsync(fromDate, toDate);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.InjuryDto> GetInjuryByIdAsync(int id)
        {
            return base.Channel.GetInjuryByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<int> SaveInjuryAsync(int playerId, My.CoachManager.Application.Dtos.InjuryDto dto)
        {
            return base.Channel.SaveInjuryAsync(playerId, dto);
        }
        
        public System.Threading.Tasks.Task RemoveInjuryAsync(My.CoachManager.Application.Dtos.InjuryDto dto)
        {
            return base.Channel.RemoveInjuryAsync(dto);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPersonService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPersonService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:55818/Services/PersonService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PersonServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPersonService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PersonServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPersonService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPersonService,
        }
    }
}

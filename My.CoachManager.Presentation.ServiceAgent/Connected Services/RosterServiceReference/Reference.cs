//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RosterServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RosterServiceReference.IRosterService")]
    public interface IRosterService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosters", ReplyAction="http://tempuri.org/IRosterService/GetRostersResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto[]> GetRostersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveRoster", ReplyAction="http://tempuri.org/IRosterService/SaveRosterResponse")]
        System.Threading.Tasks.Task<int> SaveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveRoster", ReplyAction="http://tempuri.org/IRosterService/RemoveRosterResponse")]
        System.Threading.Tasks.Task RemoveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterById", ReplyAction="http://tempuri.org/IRosterService/GetRosterByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetPlayers", ReplyAction="http://tempuri.org/IRosterService/GetPlayersResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto[]> GetPlayersAsync(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/AddPlayers", ReplyAction="http://tempuri.org/IRosterService/AddPlayersResponse")]
        System.Threading.Tasks.Task AddPlayersAsync(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/MovePlayersInSquad", ReplyAction="http://tempuri.org/IRosterService/MovePlayersInSquadResponse")]
        System.Threading.Tasks.Task MovePlayersInSquadAsync(int squadId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemovePlayers", ReplyAction="http://tempuri.org/IRosterService/RemovePlayersResponse")]
        System.Threading.Tasks.Task RemovePlayersAsync(int rosterId, int[] playerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterPlayerById", ReplyAction="http://tempuri.org/IRosterService/GetRosterPlayerByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto> GetRosterPlayerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/UpdatePlayer", ReplyAction="http://tempuri.org/IRosterService/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<int> UpdatePlayerAsync(My.CoachManager.Application.Dtos.RosterPlayerDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquads", ReplyAction="http://tempuri.org/IRosterService/GetSquadsResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto[]> GetSquadsAsync(int rosterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/SaveSquad", ReplyAction="http://tempuri.org/IRosterService/SaveSquadResponse")]
        System.Threading.Tasks.Task<int> SaveSquadAsync(int rosterId, My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/RemoveSquad", ReplyAction="http://tempuri.org/IRosterService/RemoveSquadResponse")]
        System.Threading.Tasks.Task RemoveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetSquadById", ReplyAction="http://tempuri.org/IRosterService/GetSquadByIdResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto> GetSquadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRosterService/GetRosterFromSquad", ReplyAction="http://tempuri.org/IRosterService/GetRosterFromSquadResponse")]
        System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterFromSquadAsync(int squadId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IRosterServiceChannel : RosterServiceReference.IRosterService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class RosterServiceClient : System.ServiceModel.ClientBase<RosterServiceReference.IRosterService>, RosterServiceReference.IRosterService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RosterServiceClient() : 
                base(RosterServiceClient.GetDefaultBinding(), RosterServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRosterService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RosterServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RosterServiceClient.GetBindingForEndpoint(endpointConfiguration), RosterServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RosterServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RosterServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RosterServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RosterServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RosterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto[]> GetRostersAsync()
        {
            return base.Channel.GetRostersAsync();
        }
        
        public System.Threading.Tasks.Task<int> SaveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto)
        {
            return base.Channel.SaveRosterAsync(dto);
        }
        
        public System.Threading.Tasks.Task RemoveRosterAsync(My.CoachManager.Application.Dtos.RosterDto dto)
        {
            return base.Channel.RemoveRosterAsync(dto);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterByIdAsync(int id)
        {
            return base.Channel.GetRosterByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto[]> GetPlayersAsync(int rosterId)
        {
            return base.Channel.GetPlayersAsync(rosterId);
        }
        
        public System.Threading.Tasks.Task AddPlayersAsync(int squadId, int[] playerIds)
        {
            return base.Channel.AddPlayersAsync(squadId, playerIds);
        }
        
        public System.Threading.Tasks.Task MovePlayersInSquadAsync(int squadId, int[] playerIds)
        {
            return base.Channel.MovePlayersInSquadAsync(squadId, playerIds);
        }
        
        public System.Threading.Tasks.Task RemovePlayersAsync(int rosterId, int[] playerIds)
        {
            return base.Channel.RemovePlayersAsync(rosterId, playerIds);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterPlayerDto> GetRosterPlayerByIdAsync(int id)
        {
            return base.Channel.GetRosterPlayerByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlayerAsync(My.CoachManager.Application.Dtos.RosterPlayerDto dto)
        {
            return base.Channel.UpdatePlayerAsync(dto);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto[]> GetSquadsAsync(int rosterId)
        {
            return base.Channel.GetSquadsAsync(rosterId);
        }
        
        public System.Threading.Tasks.Task<int> SaveSquadAsync(int rosterId, My.CoachManager.Application.Dtos.SquadDto dto)
        {
            return base.Channel.SaveSquadAsync(rosterId, dto);
        }
        
        public System.Threading.Tasks.Task RemoveSquadAsync(My.CoachManager.Application.Dtos.SquadDto dto)
        {
            return base.Channel.RemoveSquadAsync(dto);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.SquadDto> GetSquadByIdAsync(int id)
        {
            return base.Channel.GetSquadByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<My.CoachManager.Application.Dtos.RosterDto> GetRosterFromSquadAsync(int squadId)
        {
            return base.Channel.GetRosterFromSquadAsync(squadId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRosterService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRosterService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:55818/Services/RosterService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RosterServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRosterService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RosterServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRosterService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRosterService,
        }
    }
}

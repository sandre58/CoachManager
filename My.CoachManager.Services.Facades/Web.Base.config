<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration" />
  </configSections>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration" />

    <containers>

      <container>
        <extension type="Interception" />

        <!-- Data -->
        <register type="My.CoachManager.Infrastructure.Data.Core.IQueryableUnitOfWork, My.CoachManager.Infrastructure.Data.Core"
                  mapTo="My.CoachManager.Infrastructure.Data.UnitOfWorks.DataContext, My.CoachManager.Infrastructure.Data">
          <lifetime type="resolve" />
        </register>

        <register type="My.CoachManager.Domain.Core.IRepository`1, My.CoachManager.Domain.Core"
                  mapTo="My.CoachManager.Infrastructure.Data.Core.GenericRepository`1, My.CoachManager.Infrastructure.Data.Core">
          <lifetime type="resolve" />
        </register>

        <!-- Domain -->
        <register type="My.CoachManager.Domain.AppModule.Services.ICrudDomainService`2, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.AppModule.Services.CrudDomainService`2, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.CategoryModule.Services.ICategoryDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.CategoryModule.Services.CategoryDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.SeasonModule.Services.ISeasonDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.SeasonModule.Services.SeasonDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.SquadModule.Services.ISquadDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.SquadModule.Services.SquadDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.RosterModule.Services.IRosterDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.RosterModule.Services.RosterDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.InjuryModule.Services.IInjuryDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.InjuryModule.Services.InjuryDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.TrainingModule.Services.ITrainingDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.TrainingModule.Services.TrainingDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Domain.PersonModule.Services.IPlayerDomainService, My.CoachManager.Domain"
                  mapTo="My.CoachManager.Domain.PersonModule.Services.PlayerDomainService, My.CoachManager.Domain">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <!-- Application -->
        <register type="My.CoachManager.Application.Services.CategoryModule.ICategoryAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.CategoryModule.CategoryAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.PositionModule.IPositionAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.PositionModule.PositionAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.UserModule.IUserAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.UserModule.UserAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.RosterModule.ISquadAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.RosterModule.SquadAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.RosterModule.IRosterAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.RosterModule.RosterAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.InjuryModule.IInjuryAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.InjuryModule.InjuryAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.TrainingModule.ITrainingAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.TrainingModule.TrainingAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.SeasonModule.ISeasonAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.SeasonModule.SeasonAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.AddressModule.IAddressAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.AddressModule.AddressAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.PersonModule.ICountryAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.PersonModule.CountryAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>

        <register type="My.CoachManager.Application.Services.PersonModule.IPlayerAppService, My.CoachManager.Application.Services"
                  mapTo="My.CoachManager.Application.Services.PersonModule.PlayerAppService, My.CoachManager.Application.Services">
          <lifetime type="resolve" />
          <interceptor type="InterfaceInterceptor" />
          <interceptionBehavior type="My.CoachManager.Services.Unity.Behaviors.DebugBehavior, My.CoachManager.Services.Unity" />
        </register>
      </container>
    </containers>
  </unity>

  <connectionStrings>
    <add name="CoachManager" connectionString="Data Source=CFD-W055\SQLEXPRESS;Initial Catalog=CoachManager;Integrated Security=true" providerName="System.Data.SqlClient" />
  </connectionStrings>

  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>

  <system.web>
    <globalization uiCulture="fr-FR" culture="fr-FR" />

    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
    <sessionState timeout="60" />
  </system.web>

  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="CoachManagerHttpBinding" maxBufferPoolSize="2147483647" maxReceivedMessageSize="2147483647" maxBufferSize="2147483647" sendTimeout="00:10:00" receiveTimeout="00:10:00" closeTimeout="00:10:05" />
      </basicHttpBinding>
    </bindings>

    <services>
      <service name="My.CoachManager.Services.Wcf.CategoryService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.ICategoryService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.PositionService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.IPositionService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.PersonService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.IPersonService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.SeasonService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.ISeasonService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.UserService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.IUserService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.RosterService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.IRosterService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.TrainingService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.ITrainingService" />
      </service>
      <service name="My.CoachManager.Services.Wcf.AddressService" behaviorConfiguration="thrownExceptions">
        <endpoint binding="basicHttpBinding" bindingConfiguration="CoachManagerHttpBinding" contract="My.CoachManager.Services.Wcf.Interfaces.IAddressService" />
      </service>
    </services>

    <behaviors>
      <serviceBehaviors>
        <behavior name="thrownExceptions">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceThrottling maxConcurrentCalls="100" maxConcurrentSessions="2147483647" maxConcurrentInstances="100" />
          <dataContractSerializer maxItemsInObjectGraph="2147483647" />
          <thrownExceptions enabled="true" />
        </behavior>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
        <behavior name="NoExceptionThrown">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>

    <extensions>
      <behaviorExtensions>
        <add name="thrownExceptions" type="My.CoachManager.Services.Core.Behaviors.ThrownExceptionsElement, My.CoachManager.Services.Core" />
      </behaviorExtensions>
    </extensions>

    <protocolMapping>
      <add binding="basicHttpsBinding" scheme="https" />
    </protocolMapping>

    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" minFreeMemoryPercentageToActivateService="0" />
  </system.serviceModel>

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true" />

    <httpProtocol>
      <customHeaders>
        <add name="Access-Control-Allow-Origin" value="*" />
      </customHeaders>
    </httpProtocol>
  </system.webServer>

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Unity.Abstractions" publicKeyToken="489b6accfaf20ef0" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.2.0" newVersion="4.0.2.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="NLog" publicKeyToken="5120e14c03d0593c" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-4.5.11.0" newVersion="4.0.0.0"/>
      </dependentAssembly>
      <!--<dependentAssembly>
        <assemblyIdentity name="Prism" publicKeyToken="40EE6C3A2184DC59" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.1.0.431" newVersion="7.1.0.431" />
      </dependentAssembly>
      
      <dependentAssembly>
      <assemblyIdentity name="Microsoft.Extensions.Logging.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral" />
      <bindingRedirect oldVersion="0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>-->
    </assemblyBinding>
  </runtime>
</configuration>
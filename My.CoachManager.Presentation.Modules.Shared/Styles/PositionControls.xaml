<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Controls;assembly=My.CoachManager.Presentation.Controls"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Controls.Parameters;assembly=My.CoachManager.Presentation.Controls"
                    xmlns:constants="clr-namespace:My.CoachManager.CrossCutting.Core.Constants;assembly=My.CoachManager.CrossCutting.Core"
                    xmlns:enum="clr-namespace:My.CoachManager.CrossCutting.Core.Enums;assembly=My.CoachManager.CrossCutting.Core">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Base/Converters.xaml" />
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Base/Margins.xaml" />
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Base/Sizes.xaml" />
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Base/Fonts.xaml" />
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Base/Geometry.xaml" />
        <ResourceDictionary Source= "pack://application:,,,/My.CoachManager.Presentation.Resources;component/Styles/Controls/ListBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="PositionCheckboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" >
                        <controls:Icon Content="{StaticResource ClothesGeometry}" Foreground="{TemplateBinding Background}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Height="{Binding ItemHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}"
                                       Width="{Binding ItemHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}" />
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="{DynamicResource ColorOpacity}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Opacity" Value="{DynamicResource ColorOpacity}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Opacity" Value="1" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Opacity" Value="{DynamicResource ColorOpacity}" />
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusBackground)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PositionStyle" TargetType="{x:Type controls:SelectorItem}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Grid.Row" Value="{Binding Row}" />
        <Setter Property="Grid.Column" Value="{Binding Column}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectorItem}">
                    <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Code}" ToolTip="{Binding Label}" 
                              Style="{StaticResource PositionCheckboxStyle}"
                              Padding="{TemplateBinding Padding}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}" Value="{x:Static Orientation.Horizontal}">
                <Setter Property="Grid.Row" Value="{Binding Column}" />
                <Setter Property="Grid.Column" Value="{Binding Row, Converter={StaticResource VerticalRowToHorizontalColumnPositionConverter}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PlayerPositionStyle" TargetType="{x:Type controls:SelectorItem}" BasedOn="{StaticResource PositionStyle}">
        <Setter Property="Grid.Row" Value="{Binding Position.Row}" />
        <Setter Property="Grid.Column" Value="{Binding Position.Column}" />
        <Setter Property="Background" Value="{DynamicResource Accent}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentForeground}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="Cursor" Value="{x:Null}" />
        <Setter Property="ToolTip" Value="{Binding Position.Label}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectorItem}">
                    <Grid RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}" ToolTip="{TemplateBinding ToolTip}" >
                        <Ellipse Fill="{TemplateBinding Background}"
                                 StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource FindAncestor, AncestorType=controls:SelectorItem}}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 Height="{Binding ItemHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}"
                                 Width="{Binding ItemHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <!--<TextBlock Text="{Binding Position.Code}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PositionsSelector}}}" Value="{x:Static Orientation.Horizontal}">
                <Setter Property="Grid.Row" Value="{Binding Position.Column}" />
                <Setter Property="Grid.Column" Value="{Binding Position.Row, Converter={StaticResource VerticalRowToHorizontalColumnPositionConverter}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PositionRating}" Value="{x:Static enum:PositionRating.Natural}">
                <Setter Property="Background" Value="{DynamicResource Excellent}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PositionRating}" Value="{x:Static enum:PositionRating.VeryGood}">
                <Setter Property="Background" Value="{DynamicResource Good}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PositionRating}" Value="{x:Static enum:PositionRating.Good}">
                <Setter Property="Background" Value="{DynamicResource Average}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PositionRating}" Value="{x:Static enum:PositionRating.Average}">
                <Setter Property="Background" Value="{DynamicResource Poor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding PositionRating}" Value="{x:Static enum:PositionRating.Poor}">
                <Setter Property="Background" Value="{DynamicResource Bad}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsNatural}" Value="True">
                <Setter Property="BorderThickness" Value="3" />
                <Setter Property="BorderBrush" Value="{DynamicResource Accent}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelectable}" Value="False">
                <Setter Property="Background" Value="{DynamicResource Control}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DarkControl}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
                <Setter Property="ToolTip" Value="{x:Null}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:PositionsSelector}">
        <Setter Property="Height" Value="400" />
        <Setter Property="Width" Value="280" />
        <Setter Property="ItemHeight" Value="50" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="FontSize" Value="{StaticResource MidSmallFontSize}" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="BorderBrush" Value="{DynamicResource Dark}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource PositionStyle}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid parameters:GridParameters.RowCount="{x:Static constants:PositionConstants.RowsCount}"
                          parameters:GridParameters.ColumnCount="{x:Static constants:PositionConstants.ColumnsCount}"
                          IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PositionsSelector}">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Image x:Name="Image" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"
                                   Source="../Images/ground.jpg" SnapsToDevicePixels="True" RenderOptions.BitmapScalingMode="HighQuality" />
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                    <Trigger Property="Orientation" Value="{x:Static Orientation.Horizontal}">
                            <Setter TargetName="Image" Property="Source" Value="../Images/ground_horizontal.jpg" />
                    </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </Trigger>
            <Trigger Property="Orientation" Value="{x:Static Orientation.Horizontal}">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <Grid parameters:GridParameters.RowCount="{x:Static constants:PositionConstants.ColumnsCount}"
                                  parameters:GridParameters.ColumnCount="{x:Static constants:PositionConstants.RowsCount}"
                                  IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
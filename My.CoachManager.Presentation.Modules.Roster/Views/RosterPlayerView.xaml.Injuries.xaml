<UserControl x:Class="My.CoachManager.Presentation.Modules.Roster.Views.RosterPlayerInjuriesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewModels="clr-namespace:My.CoachManager.Presentation.Modules.Roster.ViewModels"
             xmlns:controls="clr-namespace:My.CoachManager.Presentation.Controls;assembly=My.CoachManager.Presentation.Controls"
             xmlns:columns="clr-namespace:My.CoachManager.Presentation.Controls.GridViews.Columns;assembly=My.CoachManager.Presentation.Controls"
             xmlns:entities="clr-namespace:My.CoachManager.CrossCutting.Core.Resources.Entities;assembly=My.CoachManager.CrossCutting.Core"
             xmlns:models="clr-namespace:My.CoachManager.Presentation.Models;assembly=My.CoachManager.Presentation.Models"
             xmlns:resources="clr-namespace:My.CoachManager.Presentation.Modules.Roster.Resources"
             xmlns:enum="clr-namespace:My.CoachManager.CrossCutting.Core.Enums;assembly=My.CoachManager.CrossCutting.Core"
             xmlns:strings="clr-namespace:My.CoachManager.CrossCutting.Core.Resources;assembly=My.CoachManager.CrossCutting.Core"
             xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Controls.Parameters;assembly=My.CoachManager.Presentation.Controls"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=viewModels:RosterPlayerViewModel}"
             d:DesignHeight="500" d:DesignWidth="800">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- Is Injuried -->
        <controls:HeaderPanel Grid.Column="0" Grid.Row="0" Header="{x:Static resources:RosterPlayerResources.Injuried}" MinHeight="200"  MinWidth="350"
                              Visibility="{Binding Item.IsInjured, IsAsync=True, FallbackValue=Hidden, Converter={StaticResource BooleanToVisibilityConverter}}">
            <controls:HeaderPanel.Style>
                <Style TargetType="{x:Type controls:HeaderPanel}" BasedOn="{StaticResource {x:Type controls:HeaderPanel}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Item.Injury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Serious}">
                            <Setter Property="Background" Value="{DynamicResource VeryBad}" />
                            <Setter Property="Foreground" Value="{DynamicResource White}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Item.Injury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Average}">
                            <Setter Property="Background" Value="{DynamicResource Bad}" />
                            <Setter Property="Foreground" Value="{DynamicResource White}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Item.Injury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Minor}">
                            <Setter Property="Background" Value="{DynamicResource Poor}" />
                            <Setter Property="Foreground" Value="{DynamicResource White}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Item.Injury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Slight}">
                            <Setter Property="Background" Value="{DynamicResource Slight}" />
                            <Setter Property="Foreground" Value="{DynamicResource White}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </controls:HeaderPanel.Style>
            <StackPanel>
                <TextBlock Text="{Binding Item.Injury.Condition, IsAsync=True}" Style="{StaticResource HeaderStyle}" Margin="{StaticResource MediumVerticalMargin}" />
                <TextBlock Text="{Binding Item.Injury.ExpectedReturnLabel, IsAsync=True, StringFormat={x:Static resources:RosterPlayerResources.ExpectedReturn}}" Margin="{StaticResource MediumVerticalMargin}" Style="{StaticResource SmallHeaderStyle}" FontWeight="Normal"
                           Visibility="{Binding Item.Injury.ExpectedReturnLabel, IsAsync=True, Converter={StaticResource NullToVisibilityConverter}}"/>
                <TextBlock Text="{x:Static resources:RosterPlayerResources.NoExpectedReturn}" Margin="{StaticResource MediumVerticalMargin}" Style="{StaticResource SmallHeaderStyle}" FontWeight="Normal"
                           Visibility="{Binding Item.Injury.ExpectedReturnLabel, IsAsync=True, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=inverse}"/>
            </StackPanel>
        </controls:HeaderPanel>

        <!-- Is not injuried -->
        <controls:HeaderPanel Grid.Column="0" Grid.Row="0" Header="{x:Static resources:RosterPlayerResources.NotInjuried}" Style="{StaticResource PositiveHeaderPanelStyle}" MinHeight="130" MinWidth="350"
                              Visibility="{Binding Item.IsInjured, IsAsync=True, FallbackValue=Hidden, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=inverse}">
            <StackPanel>
                <TextBlock Text="{x:Static resources:RosterPlayerResources.InFettle}" Style="{StaticResource HeaderStyle}" Margin="{StaticResource MediumVerticalMargin}" />
            </StackPanel>
        </controls:HeaderPanel>

        <!-- Injuries -->
        <controls:HeaderPanel Grid.Column="0" Grid.Row="1" Header="{x:Static resources:RosterPlayerResources.InjuriesHistory}" MinHeight="200" MinWidth="400">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Button Grid.Row="0" Content="{x:Static resources:RosterPlayerResources.Addinjury}" HorizontalAlignment="Right" Command="{Binding AddInjuryCommand}" 
                        Style="{StaticResource AddTextAndIconButtonStyle}" Margin="{StaticResource DefaultVerticalMargin}" />

                    <controls:ExtendedListView Grid.Row="1" ItemsSource="{Binding Item.Injuries, IsAsync=True}" SelectedItem="{Binding SelectedInjury, IsAsync=True, Mode=TwoWay}" DoubleClickCommand="{Binding EditInjuryCommand}" MaxHeight="270">

                    <parameters:ControlParameters.InputBindings>
                        <InputBindingCollection>
                            <KeyBinding Key="Delete" Command="{Binding RemoveInjuryCommand}" CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" />
                            <KeyBinding Key="E" Modifiers="Control" Command="{Binding EditInjuryCommand}" CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" />
                        </InputBindingCollection>
                    </parameters:ControlParameters.InputBindings>

                    <controls:ExtendedListView.View>
                        <controls:ExtendedGridView>

                            <!-- Actions -->
                            <GridViewColumn Width="80">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="models:InjuryModel">
                                        <StackPanel Orientation="Horizontal">

                                            <controls:ToolbarControl x:Name="ActionsControl" ShowSelection="False">


                                                <Button Style="{StaticResource RemoveButtonStyle}"
                                                        Width="18" Height="18"
                                                        ToolTip="{x:Static strings:ControlResources.Remove}"
                                                        Command="{Binding DataContext.RemoveInjuryCommand,
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                        CommandParameter="{Binding}"/>
                                                
                                                <Button CommandParameter="{Binding}"
                                                        Command="{Binding DataContext.EditInjuryCommand,
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                                        Content="{StaticResource EditPageGeometry}"
                                                        ToolTip="{x:Static strings:ControlResources.Edit}" />

                                            </controls:ToolbarControl>
                                        </StackPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <!-- Date -->
                            <columns:ExtendedGridViewColumn Header="{x:Static entities:InjuryResources.Date}" Width="120">
                                <columns:ExtendedGridViewColumn.CellTemplate>
                                    <DataTemplate DataType="models:InjuryModel">
                                        <TextBlock Text="{Binding Date, StringFormat={}{0:dd/MM/yyyy}}" FontWeight="Bold" />
                                    </DataTemplate>
                                </columns:ExtendedGridViewColumn.CellTemplate>
                            </columns:ExtendedGridViewColumn>

                            <!-- Condition -->
                            <columns:ExtendedGridViewColumn Header="{x:Static entities:InjuryResources.Condition}" Width="300" DisplayMemberBinding="{Binding Condition}" />

                            <!-- ExpectedReturn -->
                            <columns:ExtendedGridViewColumn Header="{x:Static entities:InjuryResources.ExpectedReturn}" Width="150" DisplayMemberBinding="{Binding ExpectedReturnLabel}" />
                        </controls:ExtendedGridView>
                    </controls:ExtendedListView.View>
                </controls:ExtendedListView>

            </Grid>

        </controls:HeaderPanel>

        <!-- Medical -->
        <controls:HeaderPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Header="{x:Static resources:RosterPlayerResources.Medical}" MinHeight="550"  MinWidth="350">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="420" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <controls:InjuryTypeSelector Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" SelectedType="{Binding SelectedInjury.Type, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" IsEnabled="False"
                                             IsFemale="{Binding Item.Gender, IsAsync=True, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static enum:GenderType.Female}}">
                    <controls:InjuryTypeSelector.Style>
                        <Style TargetType="{x:Type controls:InjuryTypeSelector}" BasedOn="{StaticResource {x:Type controls:InjuryTypeSelector}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Serious}">
                                    <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource VeryBad}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Average}">
                                    <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Bad}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Minor}">
                                    <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Poor}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Slight}">
                                    <Setter Property="parameters:ControlParameters.Color" Value="{DynamicResource Slight}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </controls:InjuryTypeSelector.Style>
                    </controls:InjuryTypeSelector>

                <StackPanel Grid.Row="1" Grid.Column="0" Margin="{StaticResource MediumVerticalMargin}">
                    <TextBlock Text="{Binding SelectedInjury.Condition, IsAsync=True, Converter={StaticResource ToUpperConverter}}" >
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeaderStyle}">
                            <Style.Triggers>
                                    <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Serious}">
                                        <Setter Property="Foreground" Value="{DynamicResource VeryBad}" />
                                </DataTrigger>

                                    <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Average}">
                                        <Setter Property="Foreground" Value="{DynamicResource Bad}" />
                                </DataTrigger>

                                    <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Minor}">
                                        <Setter Property="Foreground" Value="{DynamicResource Poor}" />
                                </DataTrigger>

                                    <DataTrigger Binding="{Binding SelectedInjury.Severity, IsAsync=True}" Value="{x:Static enum:InjurySeverity.Slight}">
                                        <Setter Property="Foreground" Value="{DynamicResource Slight}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Text="{Binding SelectedInjury.Description}" />
                </StackPanel>

                <controls:HeaderPanel  Grid.Row="1" Grid.Column="1" Style="{StaticResource LargeLabelStyle}" Header="{x:Static entities:InjuryResources.ExpectedReturn}" Content="{Binding SelectedInjury.ExpectedReturnLabel, IsAsync=True}" />
            </Grid>
        </controls:HeaderPanel>

    </Grid>
</UserControl>
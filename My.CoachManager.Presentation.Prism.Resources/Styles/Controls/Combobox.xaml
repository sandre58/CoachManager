<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:parameters="clr-namespace:My.CoachManager.Presentation.Prism.Controls.Parameters;assembly=My.CoachManager.Presentation.Prism.Controls"
                    xmlns:controls="clr-namespace:My.CoachManager.Presentation.Prism.Controls;assembly=My.CoachManager.Presentation.Prism.Controls"
                    xmlns:models="clr-namespace:My.CoachManager.Presentation.Prism.Models;assembly=My.CoachManager.Presentation.Prism.Models">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Base/Margins.xaml" />
        <ResourceDictionary Source="../Base/Converters.xaml" />
        <ResourceDictionary Source="../Base/Shadows.xaml" />
        <ResourceDictionary Source="Button.xaml" />
        <ResourceDictionary Source="Validation.xaml" />
        <ResourceDictionary Source="TextBox.xaml" />
        <ResourceDictionary Source="TextBlock.xaml" />
        <ResourceDictionary Source="ScrollBar.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Combox Item -->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Margin="0 0.5" Background="{TemplateBinding Background}">
                        <Border x:Name="ItemBackground"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource ControlMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AccentForeground}" />
                            <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource Accent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource ComboBoxItemStyle}" />

    <!-- Toggle Button -->
    <Style x:Key="ComboBoxDropDownToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="ToggleButtonRootGrid">
                        <Border x:Name="PART_Background"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Padding="{StaticResource DefaultMargin}" />

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="TextColumn" Width="*" />
                                <ColumnDefinition x:Name="ButtonColumn" Width="Auto" />
                                <ColumnDefinition x:Name="ToggleButtonColumn" Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Button x:Name="PART_ClearText" Grid.Column="1" Style="{StaticResource ClearTextBoxButtonStyle}"
                                    Visibility="{TemplateBinding parameters:TextBoxParameters.ClearTextButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <Grid x:Name="BtnArrowBackground"
                                  Grid.Column="2"
                                  Width="{TemplateBinding parameters:TextBoxParameters.ButtonWidth}"
                                  Background="Transparent">
                                <Path x:Name="BtnArrow"
                                      Width="12"
                                      Height="6"
                                      HorizontalAlignment="Center"
                                      Fill="{TemplateBinding Foreground}"
                                      Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
                                      IsHitTestVisible="false"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Stretch="Uniform" />
                            </Grid>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkControl}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenuStyle}" />
        <Setter Property="parameters:TextBoxParameters.IsMonitoring" Value="True" />
        <Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource ControlPressed}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource ControlMouseOver}" />
        <Setter Property="parameters:TextBoxParameters.Watermark" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:FormParameters.Label), Mode=OneWay}" />
        <Setter Property="parameters:TextBoxParameters.UseFloatingWatermark" Value="True" />
        <Setter Property="parameters:TextBoxParameters.ButtonWidth" Value="18" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource PopupValidationErrorTemplate}" />
        <Setter Property="parameters:ComboBoxParameters.DropDownButtonVisible" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource SmallScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
                        <Storyboard x:Key="EnterGotFocus">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity"
                                             To=".2" />
                        </Storyboard>
                        <Storyboard x:Key="ExitGotFocus">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity" />
                        </Storyboard>

                        <Storyboard x:Key="EnterHasText">
                            <DoubleAnimation Duration="0:0:0.2"
                                             From=".2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" />
                        </Storyboard>
                        <Storyboard x:Key="ExitHasText">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="TextColumn" Width="*" />
                                <ColumnDefinition x:Name="ButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth), Mode=OneWay}" />
                                <ColumnDefinition x:Name="ToggleButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth), Mode=OneWay}" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ButtonRow" Height="*" />
                            </Grid.RowDefinitions>

                            <ToggleButton x:Name="PART_DropDownToggle"
                                          Grid.Row="1"
                                          Grid.ColumnSpan="3"
                                          Margin="0"
                                          VerticalAlignment="Stretch"
                                          Style="{StaticResource ComboBoxDropDownToggleButtonStyle}"
                                          Background="{TemplateBinding Background}"
                                          Foreground="{TemplateBinding BorderBrush}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          parameters:TextBoxParameters.ButtonWidth="{TemplateBinding parameters:TextBoxParameters.ButtonWidth}"
                                          parameters:ControlParameters.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.CornerRadius), Mode=OneWay}"
                                          parameters:TextBoxParameters.ButtonContent="{TemplateBinding parameters:TextBoxParameters.ButtonContent}"
                                          parameters:TextBoxParameters.ButtonContentTemplate="{TemplateBinding parameters:TextBoxParameters.ButtonContentTemplate}"
                                          parameters:TextBoxParameters.ButtonFontFamily="{TemplateBinding parameters:TextBoxParameters.ButtonFontFamily}"
                                          parameters:TextBoxParameters.ButtonFontSize="{TemplateBinding parameters:TextBoxParameters.ButtonFontSize}"
                                          parameters:TextBoxParameters.ClearTextButton="{TemplateBinding parameters:TextBoxParameters.ClearTextButton}"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          KeyboardNavigation.IsTabStop="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Visibility="{TemplateBinding parameters:ComboBoxParameters.DropDownButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <TextBox x:Name="PART_EditableTextBox"
                                     Grid.Column="0"
                                     Grid.Row="1"
                                     Margin="0"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     Style="{StaticResource TextBoxBaseStyle}"
                                     Background="{x:Null}"
                                     Foreground="{TemplateBinding Foreground}"
                                     BorderThickness="0"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontSize="{TemplateBinding FontSize}"
                                     parameters:TextBoxParameters.ButtonWidth="{TemplateBinding parameters:TextBoxParameters.ButtonWidth}"
                                     parameters:TextBoxParameters.ButtonContent="{TemplateBinding parameters:TextBoxParameters.ButtonContent}"
                                     parameters:TextBoxParameters.ButtonContentTemplate="{TemplateBinding parameters:TextBoxParameters.ButtonContentTemplate}"
                                     parameters:TextBoxParameters.HasText="{TemplateBinding parameters:TextBoxParameters.HasText}"
                                     parameters:TextBoxParameters.ButtonFontFamily="{TemplateBinding parameters:TextBoxParameters.ButtonFontFamily}"
                                     parameters:TextBoxParameters.ButtonFontSize="{TemplateBinding parameters:TextBoxParameters.ButtonFontSize}"
                                     parameters:TextBoxParameters.UseFloatingWatermark="{TemplateBinding parameters:TextBoxParameters.UseFloatingWatermark}"
                                     parameters:TextBoxParameters.Watermark="{TemplateBinding parameters:TextBoxParameters.Watermark}"
                                     CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ComboBoxParameters.CharacterCasing), Mode=OneWay}"
                                     Focusable="True"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ComboBoxParameters.MaxLength), Mode=OneWay}"
                                     parameters:TextBoxParameters.Mask="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.Mask), Mode=OneWay}"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     Visibility="Collapsed" />
                            <TextBlock x:Name="PART_WatermarkMessage"
                                       Grid.Column="0"
                                       Grid.Row="1"
                                       Margin="6 2"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Opacity="0.6"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       IsHitTestVisible="False"
                                       Text="{TemplateBinding parameters:TextBoxParameters.Watermark}"
                                       Visibility="Collapsed" />
                            <ContentControl x:Name="PART_FloatingMessageContainer"
                                            Grid.Column="0"
                                            Grid.Row="0"
                                            Style="{StaticResource FloatingMessageContainerStyle}">
                                <TextBlock x:Name="PART_FloatingMessage"
                                           Margin="2 2 0 0"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Style="{StaticResource AutoCollapsingTextBlock}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Text="{TemplateBinding parameters:TextBoxParameters.Watermark}" />
                            </ContentControl>
                            <Grid x:Name="ContentSite"
                                  Grid.Column="0"
                                  Grid.Row="1"
                                  Margin="6 2">
                                <ContentPresenter  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  IsHitTestVisible="False"
                                                   TextBlock.Foreground="{TemplateBinding Foreground}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Grid>

                        <Border x:Name="FocusBorder"
                                Grid.ColumnSpan="3"
                                Background="{x:Null}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />

                        <!--  AllowsTransparency="true" fixes the redraw problem under windows vista/7 with a selected non aero theme  -->
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               Margin="5 2 5 5"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Bottom"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="PopupBorder"
                                        Height="Auto"
                                        HorizontalAlignment="Stretch"
                                        Background="{DynamicResource Light}"
                                        BorderBrush="{DynamicResource Dark}"
                                        BorderThickness="1" Effect="{StaticResource BottomRightShadow}" />
                                <ScrollViewer x:Name="DropDownScrollViewer"
                                              Background="{DynamicResource Light}"
                                              Margin="2"
                                              VerticalScrollBarVisibility="Auto"
                                              Padding="1"
                                              BorderThickness="0">
                                    <Grid RenderOptions.ClearTypeHint="Enabled"  Background="{DynamicResource Light}">
                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="FocusedDropDown">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="00:00:00"
                                                                       Storyboard.TargetName="PopupBorder"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextMenu, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_WatermarkMessage" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource EnterGotFocus}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ExitGotFocus}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource EnterHasText}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ExitHasText}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(parameters:TextBoxParameters.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:TextBoxParameters.ClearTextButton)}" Value="False">
                            <Setter TargetName="ContentSite" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_EditableTextBox" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_WatermarkMessage" Property="Grid.ColumnSpan" Value="2" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ComboBoxParameters.DropDownButtonVisible)}" Value="False">
                            <Setter TargetName="ButtonColumn" Property="Width" Value="0" />
                            <Setter TargetName="ToggleButtonColumn" Property="Width" Value="0" />
                        </DataTrigger>

                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ComboBoxParameters.DropDownButtonVisible)}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False" />
                                <Condition Property="IsDropDownOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBackground)}" />
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
                        </Trigger>

                        <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VirtualisedComboBoxStyle"
           BasedOn="{StaticResource ComboBoxStyle}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsItemsHost="True"
                                            IsVirtualizing="True"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BottomBorderComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BottomBorderComboBoxStyle}" />

    <Style x:Key="AccentComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}">
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource AccentControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource AccentForeground}" />
    </Style>

    <Style x:Key="CountryBottomBorderComboboxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BottomBorderComboBoxStyle}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="models:CountryModel">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding FullPath}" Margin="{StaticResource DefaultMargin}" Height="16" Width="16" VerticalAlignment="Center" />
                        <TextBlock Text="{Binding Label}" VerticalAlignment="Center" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:SelectorItem}">

        <Setter Property="HorizontalContentAlignment"
              Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type controls:SelectorControl}}}" />
        <Setter Property="VerticalContentAlignment"
              Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type controls:SelectorControl}}}" />
        <Setter Property="Padding"
              Value="4,0,0,0" />
        <Setter Property="IsTabStop"
               Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectorItem}">
                    <Border x:Name="_background"
                       Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}">
                        <!-- In Classic Theme, The Foreground shouldn't be applied to Checkmark and Text-->
                        <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <CheckBox.Content>
                                <ContentControl Content="{TemplateBinding Content}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        Foreground="{TemplateBinding Foreground}" Focusable="False" />
                            </CheckBox.Content>
                        </CheckBox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_background" Property="Background" Value="{DynamicResource ControlMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="_background" Property="Background" Value="{DynamicResource Accent}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MultiComboBoxStyle" TargetType="{x:Type controls:MultiComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DarkControl}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenuStyle}" />
        <Setter Property="parameters:TextBoxParameters.IsMonitoring" Value="True" />
        <Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource DarkControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusBackground" Value="{DynamicResource ControlPressed}" />
        <Setter Property="parameters:ControlParameters.MouseOverBackground" Value="{DynamicResource ControlMouseOver}" />
        <Setter Property="parameters:TextBoxParameters.Watermark" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:FormParameters.Label), Mode=OneWay}" />
        <Setter Property="parameters:TextBoxParameters.UseFloatingWatermark" Value="True" />
        <Setter Property="parameters:TextBoxParameters.ButtonWidth" Value="18" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource PopupValidationErrorTemplate}" />
        <Setter Property="parameters:ComboBoxParameters.DropDownButtonVisible" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:MultiComboBox}">
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource SmallScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
                        <Storyboard x:Key="EnterGotFocus">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity"
                                             To=".2" />
                        </Storyboard>
                        <Storyboard x:Key="ExitGotFocus">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity" />
                        </Storyboard>

                        <Storyboard x:Key="EnterHasText">
                            <DoubleAnimation Duration="0:0:0.2"
                                             From=".2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" />
                        </Storyboard>
                        <Storyboard x:Key="ExitHasText">
                            <DoubleAnimation Duration="0:0:0.2"
                                             Storyboard.TargetName="PART_WatermarkMessage"
                                             Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="TextColumn" Width="*" />
                                <ColumnDefinition x:Name="ButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth), Mode=OneWay}" />
                                <ColumnDefinition x:Name="ToggleButtonColumn" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.ButtonWidth), Mode=OneWay}" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="ButtonRow" Height="*" />
                            </Grid.RowDefinitions>

                            <ToggleButton x:Name="PART_DropDownToggle"
                                          Grid.Row="1"
                                          Grid.ColumnSpan="3"
                                          Margin="0"
                                          VerticalAlignment="Stretch"
                                          Style="{StaticResource ComboBoxDropDownToggleButtonStyle}"
                                          Background="{TemplateBinding Background}"
                                          Foreground="{TemplateBinding BorderBrush}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          parameters:TextBoxParameters.ButtonWidth="{TemplateBinding parameters:TextBoxParameters.ButtonWidth}"
                                          parameters:ControlParameters.CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.CornerRadius), Mode=OneWay}"
                                          parameters:TextBoxParameters.ButtonContent="{TemplateBinding parameters:TextBoxParameters.ButtonContent}"
                                          parameters:TextBoxParameters.ButtonContentTemplate="{TemplateBinding parameters:TextBoxParameters.ButtonContentTemplate}"
                                          parameters:TextBoxParameters.ButtonFontFamily="{TemplateBinding parameters:TextBoxParameters.ButtonFontFamily}"
                                          parameters:TextBoxParameters.ButtonFontSize="{TemplateBinding parameters:TextBoxParameters.ButtonFontSize}"
                                          parameters:TextBoxParameters.ClearTextButton="{TemplateBinding parameters:TextBoxParameters.ClearTextButton}"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          KeyboardNavigation.IsTabStop="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Visibility="{TemplateBinding parameters:ComboBoxParameters.DropDownButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <TextBox x:Name="PART_EditableTextBox"
                                     Grid.Column="0"
                                     Grid.Row="1"
                                     Margin="0"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     Style="{StaticResource TextBoxBaseStyle}"
                                     Background="{x:Null}"
                                     Foreground="{TemplateBinding Foreground}"
                                     BorderThickness="0"
                                     FontFamily="{TemplateBinding FontFamily}"
                                     FontSize="{TemplateBinding FontSize}"
                                     parameters:TextBoxParameters.ButtonWidth="{TemplateBinding parameters:TextBoxParameters.ButtonWidth}"
                                     parameters:TextBoxParameters.ButtonContent="{TemplateBinding parameters:TextBoxParameters.ButtonContent}"
                                     parameters:TextBoxParameters.ButtonContentTemplate="{TemplateBinding parameters:TextBoxParameters.ButtonContentTemplate}"
                                     parameters:TextBoxParameters.HasText="{TemplateBinding parameters:TextBoxParameters.HasText}"
                                     parameters:TextBoxParameters.ButtonFontFamily="{TemplateBinding parameters:TextBoxParameters.ButtonFontFamily}"
                                     parameters:TextBoxParameters.ButtonFontSize="{TemplateBinding parameters:TextBoxParameters.ButtonFontSize}"
                                     parameters:TextBoxParameters.UseFloatingWatermark="{TemplateBinding parameters:TextBoxParameters.UseFloatingWatermark}"
                                     parameters:TextBoxParameters.Watermark="{TemplateBinding parameters:TextBoxParameters.Watermark}"
                                     CharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ComboBoxParameters.CharacterCasing), Mode=OneWay}"
                                     Focusable="True"
                                     MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ComboBoxParameters.MaxLength), Mode=OneWay}"
                                     parameters:TextBoxParameters.Mask="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:TextBoxParameters.Mask), Mode=OneWay}"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     Visibility="Collapsed" />
                            <TextBlock x:Name="PART_WatermarkMessage"
                                       Grid.Column="0"
                                       Grid.Row="1"
                                       Margin="6 2"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Opacity="0.6"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       IsHitTestVisible="False"
                                       Text="{TemplateBinding parameters:TextBoxParameters.Watermark}"
                                       Visibility="Collapsed" />
                            <ContentControl x:Name="PART_FloatingMessageContainer"
                                            Grid.Column="0"
                                            Grid.Row="0"
                                            Style="{StaticResource FloatingMessageContainerStyle}">
                                <TextBlock x:Name="PART_FloatingMessage"
                                           Margin="2 2 0 0"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Style="{StaticResource AutoCollapsingTextBlock}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Text="{TemplateBinding parameters:TextBoxParameters.Watermark}" />
                            </ContentControl>
                            <Grid x:Name="ContentSite"
                                  Grid.Column="0"
                                  Grid.Row="1"
                                  Margin="6 2">
                                <ContentPresenter  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                  IsHitTestVisible="False"
                                                   TextBlock.Foreground="{TemplateBinding Foreground}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <ContentPresenter.Resources>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="TextWrapping" Value="Wrap" />
                                        </Style>
                                    </ContentPresenter.Resources>
                                </ContentPresenter>
                            </Grid>
                        </Grid>

                        <Border x:Name="FocusBorder"
                                Grid.ColumnSpan="3"
                                Background="{x:Null}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Visibility="Collapsed" />

                        <!--  AllowsTransparency="true" fixes the redraw problem under windows vista/7 with a selected non aero theme  -->
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               Margin="5 2 5 5"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Bottom"
                               StaysOpen="False"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                <Border x:Name="PopupBorder"
                                        Height="Auto"
                                        HorizontalAlignment="Stretch"
                                        Background="{DynamicResource Light}"
                                        BorderBrush="{DynamicResource Dark}"
                                        BorderThickness="1" Effect="{StaticResource BottomRightShadow}" />
                                <ScrollViewer x:Name="DropDownScrollViewer"
                                              Background="{DynamicResource Light}"
                                              Margin="2"
                                              Padding="1"
                                              VerticalScrollBarVisibility="Auto"
                                              BorderThickness="0">
                                    <Grid RenderOptions.ClearTypeHint="Enabled"  Background="{DynamicResource Light}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <controls:SelectorItem x:Name="PART_All" Grid.Row="0" Content="{TemplateBinding TextAll}" />
                                        <ItemsPresenter Grid.Row="1" Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="FocusedDropDown">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="00:00:00"
                                                                       Storyboard.TargetName="PopupBorder"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextMenu, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_WatermarkMessage" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocusWithin}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource EnterGotFocus}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ExitGotFocus}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource EnterHasText}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ExitHasText}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(parameters:TextBoxParameters.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem, Mode=OneWay, Converter={StaticResource NullToBooleanConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:TextBoxParameters.ClearTextButton)}" Value="False">
                            <Setter TargetName="ContentSite" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_EditableTextBox" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_WatermarkMessage" Property="Grid.ColumnSpan" Value="2" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ComboBoxParameters.DropDownButtonVisible)}" Value="False">
                            <Setter TargetName="ButtonColumn" Property="Width" Value="0" />
                            <Setter TargetName="ToggleButtonColumn" Property="Width" Value="0" />
                        </DataTrigger>

                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEditable}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ComboBoxParameters.DropDownButtonVisible)}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBackground)}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False" />
                                <Condition Property="IsDropDownOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBackground)}" />
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.MouseOverBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.MouseOverForeground)}" />
                        </Trigger>

                        <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FloatingMessage" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="PART_FloatingMessage" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(parameters:ControlParameters.FocusForeground)}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="FocusBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(parameters:ControlParameters.FocusBorderBrush)}" />
                            <Setter TargetName="FocusBorder" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BottomBorderMultiComboBoxStyle" TargetType="{x:Type controls:MultiComboBox}" BasedOn="{StaticResource MultiComboBoxStyle}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Background" Value="{DynamicResource Transparent}" />
    </Style>

    <Style TargetType="{x:Type controls:MultiComboBox}" BasedOn="{StaticResource BottomBorderMultiComboBoxStyle}" />

    <Style x:Key="AccentMultiComboBoxStyle" TargetType="{x:Type controls:MultiComboBox}" BasedOn="{StaticResource MultiComboBoxStyle}">
        <Setter Property="parameters:ControlParameters.FocusBorderBrush" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverBorderBrush" Value="{DynamicResource AccentControlMouseOver}" />
        <Setter Property="parameters:ControlParameters.FocusForeground" Value="{DynamicResource AccentForeground}" />
        <Setter Property="parameters:ControlParameters.MouseOverForeground" Value="{DynamicResource AccentForeground}" />
    </Style>
</ResourceDictionary>